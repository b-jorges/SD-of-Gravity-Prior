library(lme4)
?predict.merMod
?predict.lm
?predict.merMod
?k.meas
?k.means
apropos("k means")
apropos("k mean")
apropos("cluster")
apropos("hcluster")
apropos("kmeans")
?kmeans
?predict.lm
library(lme4)
?anova.merMod
?poli
?polin
?poly
?power.t.test
?lm
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
lm.D9 <- lm(weight ~ group)
anova(lm.D9)
summary(lm.D90)
summary(lm.D9)
a = 3
b = 5
a + b
#this is a comment
this is wrong
#this is wrong
a
c = "hi"
c
for(i in 1:10){
b = 11
c = i + b
if(c > 20){print("Hi there")}
}
a = 0
while(1){
a = a + 1
print(a)
if(a > 20){
print("I am done")
break
}
}
a
for(i in 1:10){
b = 11
c = i + b
if(c > 20){
print("done")
}else{
print("not yet")
}
}
c = 0
for(i in 1:20){
if(i > 19){
print("white")
}else{
if(i > 10){
print("yellow")
}else{
print("red")
}
}
}
for(i in 1:20){
if(i>3){
print("pink")
else
print ("white")
}
}
for(i in 1:20){
if(i>3){
print("pink")
}else{
print ("white")
}
}
a = 0
while(a < 10){
a = a + 1
print(a)
if(a = 9){
print("I am done")
}
}
a = 9
a == 10
a == 9
a = 0
while(a < 10){
a = a + 1
print(a)
if(a == 9){
print("I am done")
}
}
a = 0
a = 0
while (a<5)
print ("pink")
log(1)
0.75/0.25
6.50 + 16.50 + 1.40
46 + 38
38/2 + 4
(38/2) + 4
(38/2) + 4 + (38/2)
42+19
46 + 38
38 * 2 + 8
27/(2*pi)
855.16 + 2495
855.16 + 2495 - 503.25
2495 + 340.32
?ks.test
?pnorm
27/(2*pi)
8.6 * pi
8.9 * pi
27/(2*pi)
2.8 * pi
apropos(rs.test)
apropos(prop.testÃ¹
?prop.test
?wilkox.test
?wilcox.test
50 / 8
50 / 16
(50/8)*4
(50/8)*6
(50/8)*5
25/(2*pi)
pi
4 * 2*pi
apropos(friedman.test())
?friedman.test
0.37*3
0.37*4
6/8
6/16
6/32
(6/32)*4
(6/32)*5
(6/32)*6
?curve
?pnorm
?curve
?plot
y = c(0,1)
x = c(-40, 40)
plot(y ~ x, type = "n")
plot(y ~ x, type = "n", bty = "n")
psych.shape(pse = 0, jnd, x.range = c(NA, NA),  ps.link = "probit", ps.col = "black")
{
if(ps.link == "probit"){
slope = qnorm(0.75) * (1/jnd)
curve(expr = pnorm(x, mean = pse, sd = 1/slope), from = x.range[1], to = x.range[2], col = ps.col,
add = TRUE)
}else{
warning("For the moment only works with probit link function")
}
return(0)
}
psych.shape(pse = 0, jnd, x.range = c(NA, NA),  ps.link = "probit", ps.col = "black"){
if(ps.link == "probit"){
slope = qnorm(0.75) * (1/jnd)
curve(expr = pnorm(x, mean = pse, sd = 1/slope), from = x.range[1], to = x.range[2], col = ps.col,
add = TRUE)
}else{
warning("For the moment only works with probit link function")
}
return(0)
}
psych.shape = function(pse = 0, jnd, x.range = c(NA, NA),  ps.link = "probit", ps.col = "black"){
if(ps.link == "probit"){
slope = qnorm(0.75) * (1/jnd)
curve(expr = pnorm(x, mean = pse, sd = 1/slope), from = x.range[1], to = x.range[2], col = ps.col,
add = TRUE)
}else{
warning("For the moment only works with probit link function")
}
return(0)
}
psych.shape(pse = 0, jnd = 6, x.range = c(-40, 40))
psych.shape(pse = 6, jnd = 6, x.range = c(-40, 40))
plot(y ~ x, type = "n", bty = "n")
psych.shape(pse = 0, jnd = 6, x.range = c(-40, 40), ps.col = "gray")
psych.shape(pse = 6, jnd = 6, x.range = c(-40, 40), ps.col = "black")
plot(y ~ x, type = "n", bty = "n", lab = c(5,3,7))
psych.shape(pse = 0, jnd = 6, x.range = c(-40, 40), ps.col = "gray")
?plogis
psych.shape = function(pse = 0, jnd, x.range = c(NA, NA),  ps.link = "probit", ps.col = "black"){
if(ps.link == "probit"){
slope = qnorm(0.75) * (1/jnd)
curve(expr = pnorm(x, mean = pse, sd = 1/slope), from = x.range[1], to = x.range[2], col = ps.col,
add = TRUE)
}else{
if(ps.link == "logit"){
slope = log(9) * (1/jnd)
curve(expr = plogis(x, mean = pse, sd = 1/slope), from = x.range[1], to = x.range[2], col = ps.col,
add = TRUE)
}else{
warning("For the moment it only works with probit and logit link function")
}
}
return(0)
}
plot(y ~ x, type = "n", bty = "n", lab = c(5,3,7))
psych.shape(pse = 0, jnd = 6, x.range = c(-40, 40), ps.col = "gray")
psych.shape(pse = 6, jnd = 6, x.range = c(-40, 40), ps.col = "black")
psych.shape(pse = 6, jnd = 6, x.range = c(-40, 40), ps.col = "red", ps.link = "logit")
?plogis
psych.shape = function(pse = 0, jnd, x.range = c(NA, NA),  ps.link = "probit", ps.col = "black"){
if(ps.link == "probit"){
slope = qnorm(0.75) * (1/jnd)
curve(expr = pnorm(x, mean = pse, sd = 1/slope), from = x.range[1], to = x.range[2], col = ps.col,
add = TRUE)
}else{
if(ps.link == "logit"){
slope = log(9) * (1/jnd)
curve(expr = plogis(x, location = pse, scale = 1/slope), from = x.range[1], to = x.range[2], col = ps.col,
add = TRUE)
}else{
warning("For the moment it only works with probit and logit link function")
}
}
return(0)
}
psych.shape(pse = 6, jnd = 6, x.range = c(-40, 40), ps.col = "red", ps.link = "logit")
psych.shape = function(pse = 0, jnd, x.range = c(NA, NA),  ps.link = "probit", ps.col = "black"){
if(ps.link == "probit"){
slope = qnorm(0.75) * (1/jnd)
curve(expr = pnorm(x, mean = pse, sd = 1/slope), from = x.range[1], to = x.range[2], col = ps.col,
add = TRUE)
}else{
if(ps.link == "logit"){
slope = log(9) * (1/jnd)
curve(expr = plogis(x, location = pse, scale = slope), from = x.range[1], to = x.range[2], col = ps.col,
add = TRUE)
}else{
warning("For the moment it only works with probit and logit link function")
}
}
return(0)
}
plot(y ~ x, type = "n", bty = "n", lab = c(5,3,7))
psych.shape(pse = 0, jnd = 6, x.range = c(-40, 40), ps.col = "gray")
psych.shape(pse = 6, jnd = 6, x.range = c(-40, 40), ps.col = "black")
psych.shape(pse = 6, jnd = 6, x.range = c(-40, 40), ps.col = "red", ps.link = "logit")
psych.shape = function(pse = 0, jnd, x.range = c(NA, NA),  ps.link = "probit", ps.col = "black"){
if(ps.link == "probit"){
slope = qnorm(0.75) * (1/jnd)
curve(expr = pnorm(x, mean = pse, sd = 1/slope), from = x.range[1], to = x.range[2], col = ps.col,
add = TRUE)
}else{
if(ps.link == "logit"){
slope = log(9) * (1/jnd)
curve(expr = plogis(x, location = pse, scale = 1/slope), from = x.range[1], to = x.range[2], col = ps.col,
add = TRUE)
}else{
warning("For the moment it only works with probit and logit link function")
}
}
return(0)
}
plot(y ~ x, type = "n", bty = "n", lab = c(5,3,7))
psych.shape(pse = 0, jnd = 6, x.range = c(-40, 40), ps.col = "gray")
psych.shape(pse = 6, jnd = 6, x.range = c(-40, 40), ps.col = "black")
psych.shape(pse = 6, jnd = 6, x.range = c(-40, 40), ps.col = "red", ps.link = "logit")
0.75/0.25
psych.shape = function(pse = 0, jnd, x.range = c(NA, NA),  ps.link = "probit", ps.col = "black"){
if(ps.link == "probit"){
slope = qnorm(0.75) * (1/jnd)
curve(expr = pnorm(x, mean = pse, sd = 1/slope), from = x.range[1], to = x.range[2], col = ps.col,
add = TRUE)
}else{
if(ps.link == "logit"){
slope = log(3) * (1/jnd)
curve(expr = plogis(x, location = pse, scale = 1/slope), from = x.range[1], to = x.range[2], col = ps.col,
add = TRUE)
}else{
warning("For the moment it only works with probit and logit link function")
}
}
return(0)
}
plot(y ~ x, type = "n", bty = "n", lab = c(5,3,7))
psych.shape(pse = 0, jnd = 6, x.range = c(-40, 40), ps.col = "gray")
psych.shape(pse = 6, jnd = 6, x.range = c(-40, 40), ps.col = "black")
psych.shape(pse = 6, jnd = 6, x.range = c(-40, 40), ps.col = "red", ps.link = "logit")
?curve
psych.shape = function(pse = 0, jnd, x.range = c(NA, NA),  ps.link = "probit", ps.col = "black",
ps.lwd = 1){
if(ps.link == "probit"){
slope = qnorm(0.75) * (1/jnd)
curve(expr = pnorm(x, mean = pse, sd = 1/slope), from = x.range[1], to = x.range[2], col = ps.col,
add = TRUE)
}else{
if(ps.link == "logit"){
slope = log(3) * (1/jnd)
curve(expr = plogis(x, location = pse, scale = 1/slope), from = x.range[1], to = x.range[2], col = ps.col,
add = TRUE, lwd = ps.lwd)
}else{
warning("For the moment it only works with probit and logit link function")
}
}
return(0)
}
plot(y ~ x, type = "n", bty = "n", lab = c(5,3,7))
psych.shape(pse = 0, jnd = 6, x.range = c(-40, 40), ps.col = "gray", ps.lwd = 3)
psych.shape(pse = 6, jnd = 6, x.range = c(-40, 40), ps.col = "red", ps.link = "logit", ps.lwd = 3)
plot(y ~ x, type = "n", bty = "n", lab = c(5,3,7), lwd = 3, ylab = "probability AWAY", xlab = "V surf [mm/s]")
?par
plot(y ~ x, type = "n", bty = "n", lab = c(5,3,7), lwd = 3, ylab = "probability AWAY",
xlab = "V surf [mm/s]", xaxt = "n")
axis(side = 1)
plot(y ~ x, type = "n", bty = "n", lab = c(5,3,7), lwd = 3, ylab = "probability AWAY",
xlab = "V surf [mm/s]", xaxt = "n", yaxt = "n")
axis(side = 1)
plot(y ~ x, type = "n", bty = "n", lab = c(5,3,7), lwd = 3, ylab = "probability AWAY",
xlab = "V surf [mm/s]", xaxt = "n", yaxt = "n")
axis(side = 1, lwd = 3)
axis(side = c(1,2), lwd = 3)
psych.shape(pse = 0, jnd = 6, x.range = c(-40, 40), ps.col = "gray", ps.lwd = 3)
plot(y ~ x, type = "n", bty = "n", lab = c(5,3,7), axis.lwd = 3, ylab = "probability AWAY",
xlab = "V surf [mm/s]", xaxt = "n", yaxt = "n")
plot(y ~ x, type = "n", bty = "n", lab = c(5,3,7), ylab = "probability AWAY",
xlab = "V surf [mm/s]", xaxt = "n", yaxt = "n")
axis(side = 1, lwd = 3)
axis(side = 1, lwd = 3)
plot(y ~ x, type = "n", bty = "n", lab = c(5,3,7), ylab = "probability AWAY",
xlab = "V surf [mm/s]", xaxt = "n", yaxt = "n")
axis(side = 1, lwd = 3)
axis(side = 2, lwd = 3)
y = c(0,1)
x = c(-40, 40)
plot(y ~ x, type = "n", bty = "n", lab = c(5,3,7), ylab = "probability 'AWAY'",
xlab = "V surf [mm/s]", xaxt = "n", yaxt = "n")
axis(side = 1, lwd = 3)
axis(side = 2, lwd = 3)
psych.shape(pse = 0, jnd = 6, x.range = c(-40, 40), ps.col = "gray", ps.lwd = 3)
psych.shape(pse = 6, jnd = 6, x.range = c(-40, 40), ps.col = "black", ps.lwd = 3)
y = c(0,1)
x = c(-40, 40)
plot(y ~ x, type = "n", bty = "n", lab = c(5,3,7), ylab = "probability 'AWAY'",
xlab = "V surf [mm/s]", xaxt = "n", yaxt = "n")
axis(side = 1, lwd = 3)
axis(side = 2, lwd = 3)
psych.shape(pse = 0, jnd = 6, x.range = c(-40, 40), ps.col = "gray", ps.lwd = 5)
psych.shape(pse = 6, jnd = 6, x.range = c(-40, 40), ps.col = "black", ps.lwd = 5)
psych.shape = function(pse = 0, jnd, x.range = c(NA, NA),  ps.link = "probit", ps.col = "black",
ps.lwd = 1){
if(ps.link == "probit"){
slope = qnorm(0.75) * (1/jnd)
curve(expr = pnorm(x, mean = pse, sd = 1/slope), from = x.range[1], to = x.range[2], col = ps.col,
add = TRUE, lwd = ps.lwd)
}else{
if(ps.link == "logit"){
slope = log(3) * (1/jnd)
curve(expr = plogis(x, location = pse, scale = 1/slope), from = x.range[1], to = x.range[2], col = ps.col,
add = TRUE, lwd = ps.lwd)
}else{
warning("For the moment it only works with probit and logit link function")
}
}
return(0)
}
plot(y ~ x, type = "n", bty = "n", lab = c(5,3,7), ylab = "probability 'AWAY'",
xlab = "V surf [mm/s]", xaxt = "n", yaxt = "n")
psych.shape(pse = 0, jnd = 6, x.range = c(-40, 40), ps.col = "gray", ps.lwd = 5)
psych.shape(pse = 6, jnd = 6, x.range = c(-40, 40), ps.col = "black", ps.lwd = 5)
axis(side = 1, lwd = 3)
axis(side = 2, lwd = 3)
plot(y ~ x, type = "n", bty = "n", lab = c(5,3,7), ylab = "probability 'AWAY'",
xlab = "V surf [mm/s]", xaxt = "n", yaxt = "n")
axis(side = 1, lwd = 3)
axis(side = 2, lwd = 3)
psych.shape(pse = 0, jnd = 6, x.range = c(-40, 40), ps.col = "gray", ps.lwd = 5)
psych.shape(pse = 6, jnd = 6, x.range = c(-40, 40), ps.col = "black", ps.lwd = 5)
?text
plot(y ~ x, type = "n", bty = "n", lab = c(5,3,7), ylab = "probability 'AWAY'",
xlab = "V surf [mm/s]", xaxt = "n", yaxt = "n")
axis(side = 1, lwd = 3)
axis(side = 2, lwd = 3)
psych.shape(pse = 0, jnd = 6, x.range = c(-40, 40), ps.col = "gray", ps.lwd = 5)
psych.shape(pse = 6, jnd = 6, x.range = c(-40, 40), ps.col = "black", ps.lwd = 5)
text(x = 6.5, y = 0.5, labels = "Gain < 1", cex = 3)
plot(y ~ x, type = "n", bty = "n", lab = c(5,3,7), ylab = "probability 'AWAY'",
xlab = "V surf [mm/s]", xaxt = "n", yaxt = "n")
axis(side = 1, lwd = 3)
axis(side = 2, lwd = 3)
psych.shape(pse = 0, jnd = 6, x.range = c(-40, 40), ps.col = "gray", ps.lwd = 5)
psych.shape(pse = 6, jnd = 6, x.range = c(-40, 40), ps.col = "black", ps.lwd = 5)
text(x = 6.5, y = 0.5, labels = "Gain < 1", cex = 1)
text(x = 10, y = 0.5, labels = "Gain < 1", cex = 1)
text(x = 14, y = 0.5, labels = "Gain < 1", cex = 1)
plot(y ~ x, type = "n", bty = "n", lab = c(5,3,7), ylab = "probability 'AWAY'",
xlab = "V surf [mm/s]", xaxt = "n", yaxt = "n")
axis(side = 1, lwd = 3)
axis(side = 2, lwd = 3)
psych.shape(pse = 0, jnd = 6, x.range = c(-40, 40), ps.col = "gray", ps.lwd = 5)
psych.shape(pse = 6, jnd = 6, x.range = c(-40, 40), ps.col = "black", ps.lwd = 5)
text(x = 14, y = 0.5, labels = "Gain < 1", cex = 1)
plot(y ~ x, type = "n", bty = "n", lab = c(5,3,7), ylab = "probability 'AWAY'",
xlab = "V surf [mm/s]", xaxt = "n", yaxt = "n")
axis(side = 1, lwd = 3)
axis(side = 2, lwd = 3)
psych.shape(pse = 0, jnd = 6, x.range = c(-40, 40), ps.col = "gray", ps.lwd = 5)
psych.shape(pse = 6, jnd = 6, x.range = c(-40, 40), ps.col = "black", ps.lwd = 5)
text(x = 12, y = 0.5, labels = "Gain < 1", cex = 1)
pdf(file = "filehne_predictions%01d.pdf", width = 4, height = 4, onefile = F)
#empty
plot(y ~ x, type = "n", bty = "n", lab = c(5,3,7), ylab = "probability 'AWAY'",
xlab = "V surf [mm/s]", xaxt = "n", yaxt = "n")
axis(side = 1, lwd = 3)
axis(side = 2, lwd = 3)
#control
plot(y ~ x, type = "n", bty = "n", lab = c(5,3,7), ylab = "probability 'AWAY'",
xlab = "V surf [mm/s]", xaxt = "n", yaxt = "n")
axis(side = 1, lwd = 3)
axis(side = 2, lwd = 3)
psych.shape(pse = 0, jnd = 6, x.range = c(-40, 40), ps.col = "gray", ps.lwd = 5)
#gain > 1
plot(y ~ x, type = "n", bty = "n", lab = c(5,3,7), ylab = "probability 'AWAY'",
xlab = "V surf [mm/s]", xaxt = "n", yaxt = "n")
axis(side = 1, lwd = 3)
axis(side = 2, lwd = 3)
psych.shape(pse = 0, jnd = 6, x.range = c(-40, 40), ps.col = "gray", ps.lwd = 5)
psych.shape(pse = -6, jnd = 6, x.range = c(-40, 40), ps.col = "black", ps.lwd = 5)
text(x = -12, y = 0.5, labels = "Gain > 1", cex = 1)
#gain < 1
plot(y ~ x, type = "n", bty = "n", lab = c(5,3,7), ylab = "probability 'AWAY'",
xlab = "V surf [mm/s]", xaxt = "n", yaxt = "n")
axis(side = 1, lwd = 3)
axis(side = 2, lwd = 3)
psych.shape(pse = 0, jnd = 6, x.range = c(-40, 40), ps.col = "gray", ps.lwd = 5)
psych.shape(pse = 6, jnd = 6, x.range = c(-40, 40), ps.col = "black", ps.lwd = 5)
text(x = 12, y = 0.5, labels = "Gain < 1", cex = 1)
dev.off()
getwd()
70/16
0.39/2
0.386/2
#Load mixedpsych.
setwd("/media/DATA_SHARED/Documents/MERpsychophysics.1")
source("MERpsychophysics.r")
psych.function()
psych.function
View(psych.function)
cos
lm
add_twice = function(y, x){
x = x + 2*y
plot(y ~ x)
}
add_twice(y = 10, x = 5)
z
add_twice = function(y, x){
z = y + 3
x = x + 2*z
plot(z ~ x)
return(x)
}
add_twice(y = 10, x = 5)
datafr.S1 <- MERsimulate(fixeff = c(-7.5, 0.0875), nsubject = 1,
constant = T)
datafr.S1
plot(Longer/Total ~ X, data = datafr.S1)
cbind(datafr.S1$Longer, datafr.S1$Total - datafr.S1$Longer)
cbind
Longer
fit.S1 = psych.function(ps.formula = cbind(Longer, Total - Longer) ~ X,
ps.link = "probit", ps.data = datafr.S1,
x.range = c(40, 120), ps.lines = T, ps.col = "green")
fit.S1
?glm
?glm
