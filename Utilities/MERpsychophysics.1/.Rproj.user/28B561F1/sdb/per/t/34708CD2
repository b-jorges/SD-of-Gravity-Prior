{
    "contents" : "source(\"MERpsychophysics.r\")\n\n#this ensure that your output will match mine\nset.seed(32787)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                                 \n\n#In two steps: Simulate a dataset with a categorical variable (\"condition\")\ndatafr.1 <- MERsimulate(fixeff = c(-7, 0.00875), nsubject = 5, constant = T)                               \nlevels(datafr.1$Subject) = c(\"S1\", \"S2\", \"S3\", \"S4\", \"S5\")\ndatafr.1$condition = rep(\"A\", 45)\n\ndatafr.2 <- MERsimulate(fixeff = c(-8, 0.00875),nsubject = 5, constant = T)                              \nlevels(datafr.2$Subject) = c(\"S1\", \"S2\", \"S3\", \"S4\", \"S5\")\ndatafr.2$condition = rep(\"B\", 45)\n\ndatafr = merge(datafr.1, datafr.2, all = T)\ndatafr$condition = as.factor(datafr$condition)\n\n#How to estimate the PSE in the two condtions?\n#1)use MERtreatment (note, you have to provide also the dataframe to the function)\nformula.mod = cbind(Longer, Total - Longer) ~ X * condition + (1 + X| Subject)\nmod1 <- glmer(formula = formula.mod, family = binomial(link = \"probit\"), data = datafr, nAGQ = 1)\nxplode.mod1 = xplode.mer(model = mod1, name.cont = \"X\", name.fact = \"condition\")\nMERtreatment(xplode.mod1, datafr)\n\n#2)alternatively, run twice the model with a different baseline\n#This way we can choose the baseline \ndatafr$conditionA = ifelse(datafr$condition == \"A\", 0 , 1)\n\n#fit the GLMM(probit link function)\nformula.modA = cbind(Longer, Total - Longer) ~ X * conditionA + (1 + X| Subject)\nmodA <- glmer(formula = formula.modA, family = binomial(link = \"probit\"), data = datafr, nAGQ = 1)\nsummary(modA)\n\n#New: xplode.mer (indicate the names of the predictor)\nxplode.modA = xplode.mer(model = modA, name.cont = \"X\", name.fact = \"conditionA\")\n\n#run MERdelta.probit on the xplode object\n#This is the PSE and JND for A (B is coded as a dummy == 1)\nMERdelta.probit(xplode.modA)\n\n#Now condition B is the baseline\ndatafr$conditionB = ifelse(datafr$condition == \"B\", 0 , 1)\n\n#fit the GLMM(probit link function)\nformula.modB = cbind(Longer, Total - Longer) ~ X * conditionB+ (1 + X| Subject)\nmodB <- glmer(formula = formula.modB, family = binomial(link = \"probit\"), data = datafr, nAGQ = 1)\n\nxplode.modB = xplode.mer(model = modB, name.cont = \"X\", name.fact = \"conditionB\")\n#This is the PSE and JND for B (A is coded as a dummy == 1)\nMERdelta.probit(xplode.modB)\n\n#3) I would like to implement a third method based on the variance-covariance matrix.\n#For the moment is not ready, as I don't know how to find the three-terms covariance. Without that, the CI is unprecise.\n#Define the psychometric function and run the model just once\ndefine.mod = list(pf1 = list(intercept = 1, slope = 2),\n                    pf2 = list(intercept = c(1,3), slope = c(2,4)))\n\nxplode.mod = xplode.mer(model = modA, name.cont = \"X\", name.fact = \"condition\", define.pf = define.mod)\nMERdelta.probit(xplode.mod)\n\n",
    "created" : 1398354475676.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2971001430",
    "id" : "34708CD2",
    "lastKnownWriteTime" : 1398358188,
    "path" : "~/Documents/MERpsychophysics.1/MERdemo.r",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}