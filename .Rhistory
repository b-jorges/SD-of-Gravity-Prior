ggplot(RangeOfValesSDGravity, aes(SD,Error)) +
geom_point() +
xlab("SD (m/s²)") +
ylab("Error (s)")
#####Check a range of gravity SD values
Tentative_SD_Gravity = seq(0,0.7,0.01) ####Again, takes a while
error_Gravity = c()
for (i in 1:length(Tentative_SD_Gravity)){
f = GetSDMatchForG(Tentative_SD_Gravity[i],500)
error_Gravity = c(error_Gravity,f)
}
#####Check a range of gravity SD values
Tentative_SD_Gravity = seq(0,0.07,0.01) ####Again, takes a while
error_Gravity = c()
for (i in 1:length(Tentative_SD_Gravity)){
f = GetSDMatchForG(Tentative_SD_Gravity[i],500)
error_Gravity = c(error_Gravity,f)
}
SD_RemainingVariability
response = response %>%
mutate(SD_Factor_G = abs(rnorm(length(g),1,SD_Gravity)),
SD_Factor_VY = abs(rnorm(length(g),1,0.148))*0.8,
SD_Factor_Distance = abs(rnorm(length(g),1,0.148)),
Remaining_Response_Variability = rnorm(length(g),0,0.105),
Perceived_G = 9.81*SD_Factor_G,
Perceived_VY = LastObserved_vy*SD_Factor_VY,
Perceived_Distance = HeightAtDisappearance*SD_Factor_Distance)
GetSDMatchForG = function(SD_Gravity,n_Iterations){
b = c()
for (i in 1:n_Iterations){
response = response %>%
mutate(SD_Factor_G = abs(rnorm(length(g),1,SD_Gravity)),
SD_Factor_VY = abs(rnorm(length(g),1,0.148))*0.8,
SD_Factor_Distance = abs(rnorm(length(g),1,0.148)),
Remaining_Response_Variability = rnorm(length(g),0,0.105),
Perceived_G = 9.81*SD_Factor_G,
Perceived_VY = LastObserved_vy*SD_Factor_VY,
Perceived_Distance = HeightAtDisappearance*SD_Factor_Distance)
response = response %>%
mutate(TemporalEstimateWithUncertainty = (-Perceived_VY +
(Perceived_VY^2 +
2*Perceived_G*Perceived_Distance)^0.5)/
Perceived_G,
TemporalEstimateWithUncertainty_AndResponseSD = TemporalEstimateWithUncertainty + Remaining_Response_Variability)
#Here I get the SD of the participants timing - modelled responses and get actual responses
response = response %>%
group_by(g,vy,LongOcclusion,Condition) %>%
mutate(SD_per_TTC_Modelled = sd(TemporalEstimateWithUncertainty_AndResponseSD-OccludedTimeOfTrajectory,na.rm = TRUE),
SD_per_TTC_Real = sd(TemporalError,na.rm = TRUE),
Error_Per_TTC = (SD_per_TTC_Real-SD_per_TTC_Modelled)^2)
a = unique(response$Error_Per_TTC[response$Condition == "Different g"])
b = c(b,mean(a))
if (i==n_Iterations){
print("Round done")
print(SD_Gravity)
print(mean(b))
}
}
mean(b)
}
#####Check a range of gravity SD values
Tentative_SD_Gravity = seq(0,0.07,0.01) ####Again, takes a while
error_Gravity = c()
for (i in 1:length(Tentative_SD_Gravity)){
f = GetSDMatchForG(Tentative_SD_Gravity[i],500)
error_Gravity = c(error_Gravity,f)
}
GetSDMatchForG = function(SD_Gravity,n_Iterations){
b = c()
for (i in 1:n_Iterations){
response = response %>%
mutate(SD_Factor_G = abs(rnorm(length(g),1,SD_Gravity)),
SD_Factor_VY = abs(rnorm(length(g),1,0.148))*0.8,
SD_Factor_Distance = abs(rnorm(length(g),1,0.148)),
Remaining_Response_Variability = rnorm(length(g),0,0.105),
Perceived_G = 9.81*SD_Factor_G,
Perceived_VY = LastObserved_vy*SD_Factor_VY,
Perceived_Distance = HeightAtDisappearance*SD_Factor_Distance)
response = response %>%
mutate(TemporalEstimateWithUncertainty = (-Perceived_VY +
(Perceived_VY^2 +
2*Perceived_G*Perceived_Distance)^0.5)/
Perceived_G,
TemporalEstimateWithUncertainty_AndResponseSD = TemporalEstimateWithUncertainty + Remaining_Response_Variability)
#Here I get the SD of the participants timing - modelled responses and get actual responses
response = response %>%
group_by(g,vy,LongOcclusion,Condition) %>%
mutate(SD_per_TTC_Modelled = sd(TemporalEstimateWithUncertainty_AndResponseSD-OccludedTimeOfTrajectory,na.rm = TRUE),
SD_per_TTC_Real = sd(TemporalError,na.rm = TRUE),
Error_Per_TTC = (SD_per_TTC_Real-SD_per_TTC_Modelled)^2)
a = unique(response$Error_Per_TTC[response$Condition == "Different g"])
b = c(b,mean(a))
if (i==n_Iterations){
print("Round done")
print(SD_Gravity)
print(mean(b))
}
}
mean(b)
}
ggplot(RangeOfValesSDGravity, aes(SD,Error)) +
geom_point() +
xlab("SD (m/s²)") +
ylab("Error (s)")
ggsave("Range of Gravity SDs.jpg", w=4, h=4)
#####Check a range of gravity SD values
Tentative_SD_Gravity = seq(0,0.1,0.01) ####Again, takes a while
error_Gravity = c()
for (i in 1:length(Tentative_SD_Gravity)){
f = GetSDMatchForG(Tentative_SD_Gravity[i],500)
error_Gravity = c(error_Gravity,f)
}
RangeOfValesSDGravity = data.frame(SD=Tentative_SD_Gravity,Error=error_Gravity)
ggplot(RangeOfValesSDGravity, aes(SD,Error)) +
geom_point() +
xlab("SD (m/s²)") +
ylab("Error (s)")
#####Check a range of gravity SD values
Tentative_SD_Gravity = seq(0,0.1,0.01) ####Again, takes a while
error_Gravity = c()
for (i in 1:length(Tentative_SD_Gravity)){
f = GetSDMatchForG(Tentative_SD_Gravity[i],2000)
error_Gravity = c(error_Gravity,f)
}
RangeOfValesSDGravity = data.frame(SD=Tentative_SD_Gravity,Error=error_Gravity)
ggplot(RangeOfValesSDGravity, aes(SD,Error)) +
geom_point() +
xlab("SD (m/s²)") +
ylab("Error (s)")
GetSDMatchForG = function(SD_Gravity,n_Iterations){
b = c()
for (i in 1:n_Iterations){
response = response %>%
mutate(SD_Factor_G = abs(rnorm(length(g),1,SD_Gravity)),
SD_Factor_VY = abs(rnorm(length(g),1,0.148))*0.8,
SD_Factor_Distance = abs(rnorm(length(g),1,0.148)),
Remaining_Response_Variability = rnorm(length(g),0,0.05),
Perceived_G = 9.81*SD_Factor_G,
Perceived_VY = LastObserved_vy*SD_Factor_VY,
Perceived_Distance = HeightAtDisappearance*SD_Factor_Distance)
response = response %>%
mutate(TemporalEstimateWithUncertainty = (-Perceived_VY +
(Perceived_VY^2 +
2*Perceived_G*Perceived_Distance)^0.5)/
Perceived_G,
TemporalEstimateWithUncertainty_AndResponseSD = TemporalEstimateWithUncertainty + Remaining_Response_Variability)
#Here I get the SD of the participants timing - modelled responses and get actual responses
response = response %>%
group_by(g,vy,LongOcclusion,Condition) %>%
mutate(SD_per_TTC_Modelled = sd(TemporalEstimateWithUncertainty_AndResponseSD-OccludedTimeOfTrajectory,na.rm = TRUE),
SD_per_TTC_Real = sd(TemporalError,na.rm = TRUE),
Error_Per_TTC = (SD_per_TTC_Real-SD_per_TTC_Modelled)^2)
a = unique(response$Error_Per_TTC[response$Condition == "Different g"])
b = c(b,mean(a))
if (i==n_Iterations){
print("Round done")
print(SD_Gravity)
print(mean(b))
}
}
mean(b)
}
#####Check a range of gravity SD values
Tentative_SD_Gravity = seq(0,0.2,0.02) ####Again, takes a while
error_Gravity = c()
for (i in 1:length(Tentative_SD_Gravity)){
f = GetSDMatchForG(Tentative_SD_Gravity[i],250)
error_Gravity = c(error_Gravity,f)
}
RangeOfValesSDGravity = data.frame(SD=Tentative_SD_Gravity,Error=error_Gravity)
#####Check a range of gravity SD values
Tentative_SD_Gravity = seq(0.2,0.3,0.02) ####Again, takes a while
error_Gravity = c()
for (i in 1:length(Tentative_SD_Gravity)){
f = GetSDMatchForG(Tentative_SD_Gravity[i],250)
error_Gravity = c(error_Gravity,f)
}
#####Weber fractions of maybe like 20% for arbitrary gravities and accelerations
#(our 2018 paper, + 1/2 because we maybe used some temporal information)
pnorm(1.2,1,0.295)
#####Weber fractions of maybe like 20% for arbitrary gravities and accelerations
#(our 2018 paper, + 1/2 because we maybe used some temporal information)
pnorm(1.15,1,0.295)
#####Weber fractions of maybe like 20% for arbitrary gravities and accelerations
#(our 2018 paper, + 1/2 because we maybe used some temporal information)
pnorm(1.15,1,0.225)
#####Weber fractions of maybe like 20% for arbitrary gravities and accelerations
#(our 2018 paper, + 1/2 because we maybe used some temporal information)
pnorm(1.15,1,0.222)
AF_Factor = 0.8
SD_Distance = 0.148
SD_Acceleration = 0.295
GetSDMatchForMotorNoise = function(Remaining_Response_Variability_SD,n_Iterations){
b = c()
SD_Acceleration = 0.295
SD_Velocity = 0.148
SD_Distance = 0.148
AF_Factor = 0.8
for (i in 1:n_Iterations){
response = response %>%
mutate(SD_Factor_G = abs(rnorm(length(g),1,SD_Acceleration)),
SD_Factor_VY = abs(rnorm(length(g),1,SD_Velocity))*AF_Factor,
SD_Factor_Distance = abs(rnorm(length(g),1,SD_Distance)),
Remaining_Response_Variability = rnorm(length(g),0,Remaining_Response_Variability_SD),
Perceived_G = 9.81*SD_Factor_G,
Perceived_VY = abs(LastObserved_vy)*SD_Factor_VY,
Perceived_Distance = abs(HeightAtDisappearance)*SD_Factor_Distance)
response = response %>%
mutate(TemporalEstimateWithUncertainty = (-Perceived_VY +
(Perceived_VY^2 +
2*Perceived_G*Perceived_Distance)^0.5)/
Perceived_G,
TemporalEstimateWithUncertainty_AndResponseSD = TemporalEstimateWithUncertainty + Remaining_Response_Variability)
#Here I get the SD of the participants timing - modelled responses and get actual responses
response = response %>%
group_by(g,vy,LongOcclusion,Condition) %>%
mutate(SD_per_TTC_Modelled = sd(TemporalEstimateWithUncertainty_AndResponseSD-OccludedTimeOfTrajectory,na.rm = TRUE),
SD_per_TTC_Real = sd(TemporalError,na.rm = TRUE),
Error_Per_TTC = (SD_per_TTC_Real-SD_per_TTC_Modelled)^2)
a = unique(response$Error_Per_TTC[response$Condition == "-1g"  & response$g == -9.81])
b = c(b,mean(a))
if (i==n_Iterations){
print("Round done")
print(Remaining_Response_Variability_SD)
print(mean(b))}
}
mean(b)
}
#####get general idea of range of values
Tentative_SD_Motor = seq(0,0.2,0.02) ###this takes a while!
error_Motor = c()
for (i in 1:length(Tentative_SD_Motor)){
f = GetSDMatchForMotorNoise(Tentative_SD_Motor[i],250)
error_Motor = c(error_Motor,f)
}
RangeOfValesSDRemainingError = data.frame(SD=Tentative_SD_Motor,Error=error_Motor)
ggplot(RangeOfValesSDRemainingError, aes(SD,Error)) +
geom_point() +
xlab("SD (s)") +
ylab("Error (s)")
#####get general idea of range of values
Tentative_SD_Motor = seq(0.05,0.15,0.01) ###this takes a while!
error_Motor = c()
for (i in 1:length(Tentative_SD_Motor)){
f = GetSDMatchForMotorNoise(Tentative_SD_Motor[i],500)
error_Motor = c(error_Motor,f)
}
RangeOfValesSDRemainingError = data.frame(SD=Tentative_SD_Motor,Error=error_Motor)
ggplot(RangeOfValesSDRemainingError, aes(SD,Error)) +
geom_point() +
xlab("SD (s)") +
ylab("Error (s)")
ggsave("Range of Remaining Error SDs.jpg", w=4, h=4)
#####get general idea of range of values
Tentative_SD_Motor = seq(0.03,0.18,0.01) ###this takes a while!
error_Motor = c()
for (i in 1:length(Tentative_SD_Motor)){
f = GetSDMatchForMotorNoise(Tentative_SD_Motor[i],500)
error_Motor = c(error_Motor,f)
}
RangeOfValesSDRemainingError = data.frame(SD=Tentative_SD_Motor,Error=error_Motor)
ggplot(RangeOfValesSDRemainingError, aes(SD,Error)) +
geom_point() +
xlab("SD (s)") +
ylab("Error (s)")
GetSDMatchForRemainingNoise = function(Remaining_Response_Variability_SD,n_Iterations){
b = c()
SD_Acceleration = 0.295
SD_Velocity = 0.148
SD_Distance = 0.148
AF_Factor = 0.8
for (i in 1:n_Iterations){
response = response %>%
mutate(SD_Factor_G = abs(rnorm(length(g),1,SD_Acceleration)),
SD_Factor_VY = abs(rnorm(length(g),1,SD_Velocity))*AF_Factor,
SD_Factor_Distance = abs(rnorm(length(g),1,SD_Distance)),
Remaining_Response_Variability = rnorm(length(g),0,Remaining_Response_Variability_SD),
Perceived_G = 9.81*SD_Factor_G,
Perceived_VY = abs(LastObserved_vy)*SD_Factor_VY,
Perceived_Distance = abs(HeightAtDisappearance)*SD_Factor_Distance)
response = response %>%
mutate(TemporalEstimateWithUncertainty = (-Perceived_VY +
(Perceived_VY^2 +
2*Perceived_G*Perceived_Distance)^0.5)/
Perceived_G,
TemporalEstimateWithUncertainty_AndResponseSD = TemporalEstimateWithUncertainty + Remaining_Response_Variability)
#Here I get the SD of the participants timing - modelled responses and get actual responses
response = response %>%
group_by(g,vy,LongOcclusion,Condition) %>%
mutate(SD_per_TTC_Modelled = sd(TemporalEstimateWithUncertainty_AndResponseSD-OccludedTimeOfTrajectory,na.rm = TRUE),
SD_per_TTC_Real = sd(TemporalError,na.rm = TRUE),
Error_Per_TTC = (SD_per_TTC_Real-SD_per_TTC_Modelled)^2)
a = unique(response$Error_Per_TTC[response$Condition == "-1g"  & response$g == -9.81])
b = c(b,mean(a))
if (i==n_Iterations){
print("Round done")
print(Remaining_Response_Variability_SD)
print(mean(b))}
}
mean(b)
}
#Optimize over this function to get best SD fit for the remaining error
Optimization = optimize(GetSDMatchForRemainingNoise, c(0.05,0.15), n_Iterations = 2000, maximum = FALSE, lower = 0.1, upper = 0.2, tol = 0.001)
#Optimize over this function to get best SD fit for the remaining error
Optimization = optimize(GetSDMatchForRemainingNoise, c(0.04,0.13), n_Iterations = 2000, maximum = FALSE, lower = 0.1, upper = 0.2, tol = 0.001)
SD_RemainingVariability = Optimization$minimum
#Optimize over this function to get best SD fit for the remaining error
Optimization = optimize(GetSDMatchForRemainingNoise, c(0.08), n_Iterations = 2000, maximum = FALSE, lower = 0.04, upper = 0.13, tol = 0.001)
#Optimize over this function to get best SD fit for the remaining error
Optimization = optimize(GetSDMatchForRemainingNoise, c(0.08), n_Iterations = 2000, maximum = FALSE, lower = 0.04, upper = 0.13, tol = 0.001)
SD_RemainingVariability = Optimization$minimum
SD_RemainingVariability = Optimization$minimum
SD_RemainingVariability
SD_RemainingVariability
response = response %>%
mutate(SD_Factor_G = abs(rnorm(length(g),1,SD_Gravity)),
SD_Factor_VY = abs(rnorm(length(g),1,0.148))*0.8,
SD_Factor_Distance = abs(rnorm(length(g),1,0.148)),
Response_Variability = rnorm(length(g),0,SD_RemainingVariability),
Perceived_G = 9.81*SD_Factor_G,
Perceived_VY = LastObserved_vy*SD_Factor_VY,
Perceived_Distance = HeightAtDisappearance*SD_Factor_Distance)
response = response %>%
mutate(TemporalEstimateWithUncertainty = (-Perceived_VY +
(Perceived_VY^2 +
2*Perceived_G*Perceived_Distance)^0.5)/
Perceived_G,
TemporalEstimateWithUncertainty_AndResponseSD = TemporalEstimateWithUncertainty + Response_Variability,
SimulatedTemporalError = TemporalEstimateWithUncertainty_AndResponseSD-OccludedTimeOfTrajectory)
#an SD of about 0.148 for the distance, more or less
SD_RemainingVariability
GetSDMatchForG = function(SD_Gravity,n_Iterations){
b = c()
for (i in 1:n_Iterations){
response = response %>%
mutate(SD_Factor_G = abs(rnorm(length(g),1,SD_Gravity)),
SD_Factor_VY = abs(rnorm(length(g),1,0.148))*0.8,
SD_Factor_Distance = abs(rnorm(length(g),1,0.148)),
Remaining_Response_Variability = rnorm(length(g),0,0.06),
Perceived_G = 9.81*SD_Factor_G,
Perceived_VY = LastObserved_vy*SD_Factor_VY,
Perceived_Distance = HeightAtDisappearance*SD_Factor_Distance)
response = response %>%
mutate(TemporalEstimateWithUncertainty = (-Perceived_VY +
(Perceived_VY^2 +
2*Perceived_G*Perceived_Distance)^0.5)/
Perceived_G,
TemporalEstimateWithUncertainty_AndResponseSD = TemporalEstimateWithUncertainty + Remaining_Response_Variability)
#Here I get the SD of the participants timing - modelled responses and get actual responses
response = response %>%
group_by(g,vy,LongOcclusion,Condition) %>%
mutate(SD_per_TTC_Modelled = sd(TemporalEstimateWithUncertainty_AndResponseSD-OccludedTimeOfTrajectory,na.rm = TRUE),
SD_per_TTC_Real = sd(TemporalError,na.rm = TRUE),
Error_Per_TTC = (SD_per_TTC_Real-SD_per_TTC_Modelled)^2)
a = unique(response$Error_Per_TTC[response$Condition == "Different g"])
b = c(b,mean(a))
if (i==n_Iterations){
print("Round done")
print(SD_Gravity)
print(mean(b))
}
}
mean(b)
}
#####Check a range of gravity SD values
Tentative_SD_Gravity = seq(0.2,0.3,0.02) ####Again, takes a while
error_Gravity = c()
for (i in 1:length(Tentative_SD_Gravity)){
f = GetSDMatchForG(Tentative_SD_Gravity[i],250)
error_Gravity = c(error_Gravity,f)
}
RangeOfValesSDGravity = data.frame(SD=Tentative_SD_Gravity,Error=error_Gravity)
ggplot(RangeOfValesSDGravity, aes(SD,Error)) +
geom_point() +
xlab("SD (m/s²)") +
ylab("Error (s)")
#####Check a range of gravity SD values
Tentative_SD_Gravity = seq(0.14,0.3,0.02) ####Again, takes a while
error_Gravity = c()
for (i in 1:length(Tentative_SD_Gravity)){
f = GetSDMatchForG(Tentative_SD_Gravity[i],250)
error_Gravity = c(error_Gravity,f)
}
RangeOfValesSDGravity = data.frame(SD=Tentative_SD_Gravity,Error=error_Gravity)
ggplot(RangeOfValesSDGravity, aes(SD,Error)) +
geom_point() +
xlab("SD (m/s²)") +
ylab("Error (s)")
GetSDMatchForRemainingNoise = function(Remaining_Response_Variability_SD,n_Iterations){
b = c()
SD_Acceleration = 0.222
SD_Velocity = 0.148
SD_Distance = 0.148
AF_Factor = 0.8
for (i in 1:n_Iterations){
response = response %>%
mutate(SD_Factor_G = abs(rnorm(length(g),1,SD_Acceleration)),
SD_Factor_VY = abs(rnorm(length(g),1,SD_Velocity))*AF_Factor,
SD_Factor_Distance = abs(rnorm(length(g),1,SD_Distance)),
Remaining_Response_Variability = rnorm(length(g),0,Remaining_Response_Variability_SD),
Perceived_G = 9.81*SD_Factor_G,
Perceived_VY = abs(LastObserved_vy)*SD_Factor_VY,
Perceived_Distance = abs(HeightAtDisappearance)*SD_Factor_Distance)
response = response %>%
mutate(TemporalEstimateWithUncertainty = (-Perceived_VY +
(Perceived_VY^2 +
2*Perceived_G*Perceived_Distance)^0.5)/
Perceived_G,
TemporalEstimateWithUncertainty_AndResponseSD = TemporalEstimateWithUncertainty + Remaining_Response_Variability)
#Here I get the SD of the participants timing - modelled responses and get actual responses
response = response %>%
group_by(g,vy,LongOcclusion,Condition) %>%
mutate(SD_per_TTC_Modelled = sd(TemporalEstimateWithUncertainty_AndResponseSD-OccludedTimeOfTrajectory,na.rm = TRUE),
SD_per_TTC_Real = sd(TemporalError,na.rm = TRUE),
Error_Per_TTC = (SD_per_TTC_Real-SD_per_TTC_Modelled)^2)
a = unique(response$Error_Per_TTC[response$Condition == "-1g"  & response$g == -9.81])
b = c(b,mean(a))
if (i==n_Iterations){
print("Round done")
print(Remaining_Response_Variability_SD)
print(mean(b))}
}
mean(b)
}
#####get general idea of range of values
Tentative_SD_Remaining = seq(0.03,0.18,0.01) ###this takes a while!
error_Remaining = c()
for (i in 1:length(Tentative_SD_Remaining)){
f = GetSDMatchForRemainingNoise(Tentative_SD_Remaining[i],250)
error_Remaining = c(error_Remaining,f)
}
GetSDMatchForG = function(SD_Gravity,n_Iterations){
b = c()
for (i in 1:n_Iterations){
response = response %>%
mutate(SD_Factor_G = abs(rnorm(length(g),1,SD_Gravity)),
SD_Factor_VY = abs(rnorm(length(g),1,0.148))*0.8,
SD_Factor_Distance = abs(rnorm(length(g),1,0.148)),
Remaining_Response_Variability = rnorm(length(g),0,0.1),
Perceived_G = 9.81*SD_Factor_G,
Perceived_VY = LastObserved_vy*SD_Factor_VY,
Perceived_Distance = HeightAtDisappearance*SD_Factor_Distance)
response = response %>%
mutate(TemporalEstimateWithUncertainty = (-Perceived_VY +
(Perceived_VY^2 +
2*Perceived_G*Perceived_Distance)^0.5)/
Perceived_G,
TemporalEstimateWithUncertainty_AndResponseSD = TemporalEstimateWithUncertainty + Remaining_Response_Variability)
#Here I get the SD of the participants timing - modelled responses and get actual responses
response = response %>%
group_by(g,vy,LongOcclusion,Condition) %>%
mutate(SD_per_TTC_Modelled = sd(TemporalEstimateWithUncertainty_AndResponseSD-OccludedTimeOfTrajectory,na.rm = TRUE),
SD_per_TTC_Real = sd(TemporalError,na.rm = TRUE),
Error_Per_TTC = (SD_per_TTC_Real-SD_per_TTC_Modelled)^2)
a = unique(response$Error_Per_TTC[response$Condition == "Different g"])
b = c(b,mean(a))
if (i==n_Iterations){
print("Round done")
print(SD_Gravity)
print(mean(b))
}
}
mean(b)
}
#####Check a range of gravity SD values
Tentative_SD_Gravity = seq(0.1,0.2,0.02) ####Again, takes a while
error_Gravity = c()
for (i in 1:length(Tentative_SD_Gravity)){
f = GetSDMatchForG(Tentative_SD_Gravity[i],250)
error_Gravity = c(error_Gravity,f)
}
#####Check a range of gravity SD values
Tentative_SD_Gravity = seq(0,0.1,0.02) ####Again, takes a while
error_Gravity = c()
for (i in 1:length(Tentative_SD_Gravity)){
f = GetSDMatchForG(Tentative_SD_Gravity[i],250)
error_Gravity = c(error_Gravity,f)
}
RangeOfValesSDGravity = data.frame(SD=Tentative_SD_Gravity,Error=error_Gravity)
ggplot(RangeOfValesSDGravity, aes(SD,Error)) +
geom_point() +
xlab("SD (m/s²)") +
ylab("Error (s)")
#####Check a range of gravity SD values
Tentative_SD_Gravity = seq(0,0.1,0.02) ####Again, takes a while
error_Gravity = c()
for (i in 1:length(Tentative_SD_Gravity)){
f = GetSDMatchForG(Tentative_SD_Gravity[i],500)
error_Gravity = c(error_Gravity,f)
}
RangeOfValesSDGravity = data.frame(SD=Tentative_SD_Gravity,Error=error_Gravity)
ggplot(RangeOfValesSDGravity, aes(SD,Error)) +
geom_point() +
xlab("SD (m/s²)") +
ylab("Error (s)")
RangeOfValesSDGravity = data.frame(SD=Tentative_SD_Gravity,Error=error_Gravity)
ggplot(RangeOfValesSDGravity, aes(SD,Error)) +
geom_point() +
xlab("SD (m/s²)") +
ylab("Error (s)")
#####Check a range of gravity SD values
Tentative_SD_Gravity = seq(0,0.1,0.02) ####Again, takes a while
error_Gravity = c()
for (i in 1:length(Tentative_SD_Gravity)){
f = GetSDMatchForG(Tentative_SD_Gravity[i],2000)
error_Gravity = c(error_Gravity,f)
}
RangeOfValesSDGravity = data.frame(SD=Tentative_SD_Gravity,Error=error_Gravity)
ggplot(RangeOfValesSDGravity, aes(SD,Error)) +
geom_point() +
xlab("SD (m/s²)") +
ylab("Error (s)")
