SD_Velocity = 0.107
SD_Distance = 0.148
SD_Angle = 0.089
AF_Factor = 0.8
SD_Gravity = Optimized_SD_Gravity
SD_RemainingVariability = SD_RemainingVariability
for (i in 1:100){
response = response %>%
mutate(SD_Factor_G = abs(rnorm(length(g),1,SD_Gravity)),
SD_Factor_VTan = abs(rnorm(length(g),1,SD_Velocity))*AF_Factor, #account for Aubert-Fleischl
SD_Factor_Distance = abs(rnorm(length(g),1,SD_Distance)),
SD_Factor_Angle = abs(rnorm(length(g),1,SD_Angle)),
Remaining_Response_Variability = rnorm(length(g),0,Remaining_Response_Variability_SD),
Perceived_G = 9.81*SD_Factor_G,
Actual_VTan = (LastObserved_vy^2+vx^2)^0.5, #pythagoras
Perceived_VTan = abs(Actual_VTan)*SD_Factor_VTan, #tangens ratio
ActualAngle = atan(vx/LastObserved_vy), #get actual angle
Perceived_Angle = (abs(ActualAngle)+SD_Factor_Angle),
Perceived_VY = abs(cos(Perceived_Angle))*Perceived_VTan, #vertical velocity is not sensed directly, it needs to be recovered from noisy info about tangential velocity and angle-to-vertical!
Perceived_Distance = abs(HeightAtDisappearance)*SD_Factor_Distance)
response = response %>%
mutate(TemporalEstimateWithUncertainty = (-Perceived_VY +
(Perceived_VY^2 +
2*Perceived_G*Perceived_Distance)^0.5)/
Perceived_G,
TemporalEstimateWithUncertainty_AndResponseSD = TemporalEstimateWithUncertainty + Remaining_Response_Variability,
TemporalError_Sim = (TemporalEstimateWithUncertainty_AndResponseSD-OccludedTimeOfTrajectory))
#Here I get the SD of the participants timing - modelled responses and get actual responses
response = response %>%
group_by(id,g,vy,LongOcclusion,Condition) %>%
mutate(SD_Sim_Aux = sd(TemporalError_Sim,na.rm = TRUE),
SD_Real_Aux = sd(TemporalError,na.rm = TRUE))
response = response %>%
group_by(g,vy,LongOcclusion,Condition) %>%
mutate(SD_per_TTC_Modelled = mean(SD_Sim_Aux),
SD_per_TTC_Real = mean(SD_Real_Aux),
Error_Per_TTC = (SD_per_TTC_Real-SD_per_TTC_Modelled)^2)
response3 = response %>%
select(id,block,trial,vy,LongOcclusion, g,Condition,SD_per_TTC_Modelled,SD_per_TTC_Real,Perceived_Distance,SD_Real_Aux)
response2 = rbind(response2,response3)
print(i)
}
response2 = response2 %>%
group_by(id,block,trial,g,vy,LongOcclusion,Condition) %>%
mutate(Modelled_SD = mean(SD_per_TTC_Modelled),
Real_SD = mean(SD_per_TTC_Real)) %>%
slice(1) %>%
mutate(vy_factor = case_when(
vy == 6 ~ "6 m/s",
vy == 4.5 ~ "4.5 m/s",
),
Occlusion_factor = case_when(
LongOcclusion == 1 ~ "Long Occlusion",
LongOcclusion == 0 ~ "Short Occlusion",
)
)
response3 = rbind(response2,response2)
response3$SD = c(response2$Modelled_SD,response2$Real_SD)
response3$TypeOfSD = c(rep("Simulated",length(response2$g)),rep("Observed",length(response2$g)))
#######Plot the SDs
ggplot(response3[response3$Condition == "Different g",],aes(x = g, y = SD, color = TypeOfSD)) +
geom_point(size = 5) +
ylab("SD (s)") +
xlab("Gravity") +
theme(legend.position = "top") +
scale_color_manual(name = "",
values = c(BlauUB,LightRed)) +
facet_grid(vy_factor~Occlusion_factor) +
scale_x_discrete(name = "Gravity (g)",
labels=c("0.7g", "0.85g", "1g", "1.15g", "1.3g"))
ggsave("SimulatedSDs_1Fit.jpg", w=6, h=6)
#######Get plots of SD per ID, VY, G, Occlusion Category
ggplot(response3[response3$Condition == "Different g" & response3$TypeOfSD == "Observed",],aes(x = g, y = SD_Real_Aux, color = id)) +
geom_line(size = 2) +
ylab("SD (s)") +
xlab("Gravity") +
theme(legend.position = "top") +
scale_color_manual(name = "",
values = colorRampPalette(c("grey",Yellow))(9)) +
facet_grid(vy_factor~Occlusion_factor) +
scale_x_discrete(name = "Gravity (g)",
labels=c("0.7g", "0.85g", "1g", "1.15g", "1.3g"))
ggsave("RealSDsPerSubject.jpg", w=6, h=6)
############################
#######Optimize over both values
############################
GetMatchForBoth = function(SD){
SD_Gravity = SD[1]
SD_RemainingVariability = SD[2]
b = c()
SD_Velocity = 0.148
SD_Distance = 0.148
AF_Factor = 0.8
for (i in 1:1000){
response = response %>%
mutate(SD_Factor_G = abs(rnorm(length(g),1,SD_Gravity)),
SD_Factor_VY = abs(rnorm(length(g),1,SD_Velocity))*AF_Factor,
SD_Factor_Distance = abs(rnorm(length(g),1,SD_Distance)),
Remaining_Response_Variability = rnorm(length(g),0,SD_RemainingVariability),
Perceived_G = 9.81*SD_Factor_G,
Perceived_VY = LastObserved_vy*SD_Factor_VY,
Perceived_Distance = HeightAtDisappearance*SD_Factor_Distance)
response = response %>%
mutate(TemporalEstimateWithUncertainty = (-Perceived_VY +
(Perceived_VY^2 +
2*Perceived_G*Perceived_Distance)^0.5)/
Perceived_G,
TemporalEstimateWithUncertainty_AndResponseSD = TemporalEstimateWithUncertainty + Remaining_Response_Variability,
TemporalError_Sim = TemporalEstimateWithUncertainty_AndResponseSD-OccludedTimeOfTrajectory)
#Here I get the SD of the participants timing - modelled responses and get actual responses
response = response %>%
group_by(id,g,vy,LongOcclusion,Condition) %>%
mutate(SD_Sim_Aux = sd(TemporalError_Sim,na.rm = TRUE),
SD_Real_Aux = sd(TemporalError,na.rm = TRUE))
response2 = response %>%
group_by(g,vy,LongOcclusion,Condition) %>%
mutate(SD_per_TTC_Modelled = mean(SD_Sim_Aux),
SD_per_TTC_Real = mean(SD_Real_Aux),
Error_Per_TTC = (SD_per_TTC_Real-SD_per_TTC_Modelled)^2) %>%
slice(1)
a = unique(response2$Error_Per_TTC[response2$Condition == "Different g"])
b = c(b,mean(a))
if (i==1000){
print("Round done")
print(SD_Gravity)
print(SD_RemainingVariability)
print(mean(b))
}
}
mean(b)
}
OptimTest = optim(c(0.04,0.2),GetMatchForBoth)
###########################
#######Make plot of SD fit between Observed and Simulated //
###########################
response3 = c()
response2 = c()
SD_Velocity = 0.148
SD_Distance = 0.148
AF_Factor = 0.8
SD_Gravity = OptimTest$minimum[1]
SD_RemainingVariability = OptimTest$minimum[2]
for (i in 1:100){
response = response %>%
mutate(SD_Factor_G = abs(rnorm(length(g),1,SD_Gravity)),
SD_Factor_VY = abs(rnorm(length(g),1,SD_Velocity))*AF_Factor,
SD_Factor_Distance = abs(rnorm(length(g),1,SD_Distance)),
Remaining_Response_Variability = rnorm(length(g),0,SD_RemainingVariability),
# SD_Factor_Timing = abs(rnorm(length(g),1,SD_TimeDecay)),
Perceived_G = 9.81*SD_Factor_G,
Perceived_VY = LastObserved_vy*SD_Factor_VY,
Perceived_Distance = HeightAtDisappearance*SD_Factor_Distance)
response = response %>%
mutate(TemporalEstimateWithUncertainty = (-Perceived_VY +
(Perceived_VY^2 +
2*Perceived_G*Perceived_Distance)^0.5)/
Perceived_G,
TemporalEstimateWithUncertainty_AndResponseSD = TemporalEstimateWithUncertainty + Remaining_Response_Variability,
TemporalError_Sim = (TemporalEstimateWithUncertainty_AndResponseSD-OccludedTimeOfTrajectory))
#Here I get the SD of the participants timing - modelled responses and get actual responses
response = response %>%
group_by(id,g,vy,LongOcclusion,Condition) %>%
mutate(SD_Sim_Aux = sd(TemporalError_Sim,na.rm = TRUE),
SD_Real_Aux = sd(TemporalError,na.rm = TRUE))
response = response %>%
group_by(g,vy,LongOcclusion,Condition) %>%
mutate(SD_per_TTC_Modelled = mean(SD_Sim_Aux),
SD_per_TTC_Real = mean(SD_Real_Aux),
Error_Per_TTC = (SD_per_TTC_Real-SD_per_TTC_Modelled)^2)
response3 = response %>%
select(id,block,trial,g,vy_factor,Occlusion_factor,Condition,SD_per_TTC_Modelled,SD_per_TTC_Real,Perceived_Distance,SD_Real_Aux)
response2 = rbind(response2,response3)
print(i)
}
response2 = response2 %>%
group_by(id,block,trial,g,vy,LongOcclusion,Condition) %>%
mutate(Modelled_SD = mean(SD_per_TTC_Modelled),
Real_SD = mean(SD_per_TTC_Real)) %>%
slice(1)
response3 = rbind(response2,response2)
response3$SD = c(response2$Modelled_SD,response2$Real_SD)
response3$TypeOfSD = c(rep("Simulated",length(response2$g)),rep("Observed",length(response2$g)))
#######Plot the SDs
ggplot(response3[response3$Condition == "Different g",],aes(x = g, y = SD, color = TypeOfSD)) +
geom_point(size = 5) +
ylab("SD (s)") +
xlab("Gravity") +
theme(legend.position = "top") +
scale_color_manual(name = "",
values = c(BlauUB,LightRed)) +
facet_grid(vy_factor~Occlusion_factor) +
scale_x_discrete(name = "Gravity (g)",
labels=c("0.7g", "0.85g", "1g", "1.15g", "1.3g"))
ggsave("SimulatedSDs_2Fits.jpg", w=6, h=6)
response2
OptimTest$minimum
OptimTest
OptimTest$par
#get the correspondance in terms of "Weber fractions"
pnorm(8.5,9.81,Optimized_SD_Gravity*9.81)
Optimized_SD_Gravity
#get the correspondance in terms of "Weber fractions"
pnorm(8.5,9.81,Optimized_SD_Gravity*9.81)
SD_RemainingVariability
Optimization$minimum
SD_RemainingVariability = Optimization$minimum
SD_RemainingVariability
Optimized_SD_Gravity
Optimized_SD_Gravity*9.81
#get the correspondance in terms of "Weber fractions"
pnorm(8.6,9.81,Optimized_SD_Gravity*9.81)
SD_RemainingVariability
#get the correspondance in terms of "Weber fractions"
pnorm(8.6,9.81,Optimized_SD_Gravity*9.81)
#get the correspondance in terms of "Weber fractions"
pnorm(8.57,9.81,Optimized_SD_Gravity*9.81)
#get the correspondance in terms of "Weber fractions"
pnorm(8.55,9.81,Optimized_SD_Gravity*9.81)
#get the correspondance in terms of "Weber fractions"
pnorm(8.5,9.81,Optimized_SD_Gravity*9.81)
#get the correspondance in terms of "Weber fractions"
pnorm(8.4,9.81,Optimized_SD_Gravity*9.81)
#get the correspondance in terms of "Weber fractions"
pnorm(8.46,9.81,Optimized_SD_Gravity*9.81)
#get the correspondance in terms of "Weber fractions"
pnorm(8.43,9.81,Optimized_SD_Gravity*9.81)
#get the correspondance in terms of "Weber fractions"
pnorm(8.41,9.81,Optimized_SD_Gravity*9.81)
#get the correspondance in terms of "Weber fractions"
pnorm(8.41,9.81,Optimized_SD_Gravity*9.81)
9.81/8.41
Optimized_SD_Gravity
Optimized_SD_Gravity*9.81
9.81/8.41
Optimized_SD_Gravity*9.81
response3 = c()
response2 = c()
SD_Velocity = 0.148
SD_Distance = 0.148
SD_Angle = 0.089
AF_Factor = 0.8
SD_Gravity = Optimized_SD_Gravity
SD_RemainingVariability = SD_RemainingVariability
for (i in 1:100){
response = response %>%
mutate(SD_Factor_G = abs(rnorm(length(g),1,SD_Gravity)),
SD_Factor_VTan = abs(rnorm(length(g),1,SD_Velocity))*AF_Factor, #account for Aubert-Fleischl
SD_Factor_Distance = abs(rnorm(length(g),1,SD_Distance)),
SD_Factor_Angle = abs(rnorm(length(g),1,SD_Angle)),
Remaining_Response_Variability = rnorm(length(g),0,Remaining_Response_Variability_SD),
Perceived_G = 9.81*SD_Factor_G,
Actual_VTan = (LastObserved_vy^2+vx^2)^0.5, #pythagoras
Perceived_VTan = abs(Actual_VTan)*SD_Factor_VTan, #tangens ratio
ActualAngle = atan(vx/LastObserved_vy), #get actual angle
Perceived_Angle = (abs(ActualAngle)+SD_Factor_Angle),
Perceived_VY = abs(cos(Perceived_Angle))*Perceived_VTan, #vertical velocity is not sensed directly, it needs to be recovered from noisy info about tangential velocity and angle-to-vertical!
Perceived_Distance = abs(HeightAtDisappearance)*SD_Factor_Distance)
response = response %>%
mutate(TemporalEstimateWithUncertainty = (-Perceived_VY +
(Perceived_VY^2 +
2*Perceived_G*Perceived_Distance)^0.5)/
Perceived_G,
TemporalEstimateWithUncertainty_AndResponseSD = TemporalEstimateWithUncertainty + Remaining_Response_Variability,
TemporalError_Sim = (TemporalEstimateWithUncertainty_AndResponseSD-OccludedTimeOfTrajectory))
#Here I get the SD of the participants timing - modelled responses and get actual responses
response = response %>%
group_by(id,g,vy,LongOcclusion,Condition) %>%
mutate(SD_Sim_Aux = sd(TemporalError_Sim,na.rm = TRUE),
SD_Real_Aux = sd(TemporalError,na.rm = TRUE))
response = response %>%
group_by(g,vy,LongOcclusion,Condition) %>%
mutate(SD_per_TTC_Modelled = mean(SD_Sim_Aux),
SD_per_TTC_Real = mean(SD_Real_Aux),
Error_Per_TTC = (SD_per_TTC_Real-SD_per_TTC_Modelled)^2)
response3 = response %>%
select(id,block,trial,vy,LongOcclusion, g,Condition,SD_per_TTC_Modelled,SD_per_TTC_Real,Perceived_Distance,SD_Real_Aux)
response2 = rbind(response2,response3)
print(i)
}
response2 = response2 %>%
group_by(id,block,trial,g,vy,LongOcclusion,Condition) %>%
mutate(Modelled_SD = mean(SD_per_TTC_Modelled),
Real_SD = mean(SD_per_TTC_Real)) %>%
slice(1) %>%
mutate(vy_factor = case_when(
vy == 6 ~ "6 m/s",
vy == 4.5 ~ "4.5 m/s",
),
Occlusion_factor = case_when(
LongOcclusion == 1 ~ "Long Occlusion",
LongOcclusion == 0 ~ "Short Occlusion",
)
)
response3 = rbind(response2,response2)
response3$SD = c(response2$Modelled_SD,response2$Real_SD)
response3$TypeOfSD = c(rep("Simulated",length(response2$g)),rep("Observed",length(response2$g)))
#######Plot the SDs
ggplot(response3[response3$Condition == "Different g",],aes(x = g, y = SD, color = TypeOfSD)) +
geom_point(size = 5) +
ylab("SD (s)") +
xlab("Gravity") +
theme(legend.position = "top") +
scale_color_manual(name = "",
values = c(BlauUB,LightRed)) +
facet_grid(vy_factor~Occlusion_factor) +
scale_x_discrete(name = "Gravity (g)",
labels=c("0.7g", "0.85g", "1g", "1.15g", "1.3g"))
ggsave("SimulatedSDs_1Fit.jpg", w=6, h=6)
?optimize
?optim
OptimTest
SD_Gravity*10000
SD_Gravity
SD_Gravity = OptimTest$par[1]
SD_RemainingVariability = OptimTest$par[2]
SD_Gravity
SD_RemainingVariability
pnorm(8.9,9.81,SD_Gravity*9.81)
pnorm(8.8,9.81,SD_Gravity*9.81)
pnorm(8.7,9.81,SD_Gravity*9.81)
pnorm(8.75,9.81,SD_Gravity*9.81)
8.75/9.81
9.81/8.75
8.75/9.81
pnorm(8.75,9.81,SD_Gravity*9.81) #Weber Fraction is the difference between the mean and that point on a cummulative Gaussian where mean and standard deviation yield 0.25/0.75 ...
8.75/9.81 #... in percent.
SD_Gravity*9.81 #non standardized standard deviation of the strong gravity prior
9.81-8.75
9.81+(9.81-8.75)
pnorm(10.87,9.81,SD_Gravity*9.81) #Weber Fraction is the difference between the mean and that point on a cummulative Gaussian where mean and standard deviation yield 0.25/0.75 ...
10.87/9.81 #... in percent.
9.81+(9.81-8.41)
#get the correspondance in terms of "Weber fractions"
pnorm(11.21,9.81,Optimized_SD_Gravity*9.81)
11.21/9.81
Optimized_SD_Gravity
Optimization2$minimum
Optimization2
#######Plot the SDs
Method1 = ggplot(response3[response3$Condition == "Different g",],aes(x = g, y = SD, color = TypeOfSD)) +
geom_point(size = 5) +
ylab("SD (s)") +
xlab("Gravity") +
theme(legend.position = "top") +
scale_color_manual(name = "",
values = c(BlauUB,LightRed)) +
facet_grid(vy_factor~Occlusion_factor) +
scale_x_discrete(name = "Gravity (g)",
labels=c("0.7g", "0.85g", "1g", "1.15g", "1.3g"))
#######Plot the SDs
PlotMethod1 = ggplot(response3[response3$Condition == "Different g",],aes(x = g, y = SD, color = TypeOfSD)) +
geom_point(size = 5) +
ylab("SD (s)") +
xlab("Gravity") +
theme(legend.position = "top") +
scale_color_manual(name = "",
values = c(BlauUB,LightRed)) +
facet_grid(vy_factor~Occlusion_factor) +
scale_x_discrete(name = "Gravity (g)",
labels=c("0.7g", "0.85g", "1g", "1.15g", "1.3g"))
OptimTest$par[1]
SD_Gravity = OptimTest$par[1]
SD_RemainingVariability = OptimTest$par[2]
###########################
#######Make plot of SD fit between Observed and Simulated //
###########################
response3 = c()
response2 = c()
SD_Velocity = 0.148
SD_Distance = 0.148
AF_Factor = 0.8
SD_Gravity = OptimTest$par[1]
SD_RemainingVariability = OptimTest$par[2]
for (i in 1:100){
response = response %>%
mutate(SD_Factor_G = abs(rnorm(length(g),1,SD_Gravity)),
SD_Factor_VY = abs(rnorm(length(g),1,SD_Velocity))*AF_Factor,
SD_Factor_Distance = abs(rnorm(length(g),1,SD_Distance)),
Remaining_Response_Variability = rnorm(length(g),0,SD_RemainingVariability),
# SD_Factor_Timing = abs(rnorm(length(g),1,SD_TimeDecay)),
Perceived_G = 9.81*SD_Factor_G,
Perceived_VY = LastObserved_vy*SD_Factor_VY,
Perceived_Distance = HeightAtDisappearance*SD_Factor_Distance)
response = response %>%
mutate(TemporalEstimateWithUncertainty = (-Perceived_VY +
(Perceived_VY^2 +
2*Perceived_G*Perceived_Distance)^0.5)/
Perceived_G,
TemporalEstimateWithUncertainty_AndResponseSD = TemporalEstimateWithUncertainty + Remaining_Response_Variability,
TemporalError_Sim = (TemporalEstimateWithUncertainty_AndResponseSD-OccludedTimeOfTrajectory))
#Here I get the SD of the participants timing - modelled responses and get actual responses
response = response %>%
group_by(id,g,vy,LongOcclusion,Condition) %>%
mutate(SD_Sim_Aux = sd(TemporalError_Sim,na.rm = TRUE),
SD_Real_Aux = sd(TemporalError,na.rm = TRUE))
response = response %>%
group_by(g,vy,LongOcclusion,Condition) %>%
mutate(SD_per_TTC_Modelled = mean(SD_Sim_Aux),
SD_per_TTC_Real = mean(SD_Real_Aux),
Error_Per_TTC = (SD_per_TTC_Real-SD_per_TTC_Modelled)^2)
response3 = response %>%
select(id,block,trial,g,vy_factor,Occlusion_factor,Condition,SD_per_TTC_Modelled,SD_per_TTC_Real,Perceived_Distance,SD_Real_Aux)
response2 = rbind(response2,response3)
print(i)
}
response2 = response2 %>%
group_by(id,block,trial,g,vy,LongOcclusion,Condition) %>%
mutate(Modelled_SD = mean(SD_per_TTC_Modelled),
Real_SD = mean(SD_per_TTC_Real)) %>%
slice(1)
response3 = rbind(response2,response2)
response3$SD = c(response2$Modelled_SD,response2$Real_SD)
response3$TypeOfSD = c(rep("Simulated",length(response2$g)),rep("Observed",length(response2$g)))
#######Plot the SDs
ggplot(response3[response3$Condition == "Different g",],aes(x = g, y = SD, color = TypeOfSD)) +
geom_point(size = 5) +
ylab("SD (s)") +
xlab("Gravity") +
theme(legend.position = "top") +
scale_color_manual(name = "",
values = c(BlauUB,LightRed)) +
facet_grid(vy_factor~Occlusion_factor) +
scale_x_discrete(name = "Gravity (g)",
labels=c("0.7g", "0.85g", "1g", "1.15g", "1.3g"))
###########################
#######Make plot of SD fit between Observed and Simulated //
###########################
response3 = c()
response2 = c()
SD_Velocity = 0.148
SD_Distance = 0.148
SD_Angle = 0.089
AF_Factor = 0.8
SD_Gravity = OptimTest$par[1]
SD_RemainingVariability = OptimTest$par[2]
for (i in 1:100){
response = response %>%
mutate(SD_Factor_G = abs(rnorm(length(g),1,SD_Gravity)),
SD_Factor_VTan = abs(rnorm(length(g),1,SD_Velocity))*AF_Factor, #account for Aubert-Fleischl
SD_Factor_Distance = abs(rnorm(length(g),1,SD_Distance)),
SD_Factor_Angle = abs(rnorm(length(g),1,SD_Angle)),
Remaining_Response_Variability = rnorm(length(g),0,Remaining_Response_Variability_SD),
Perceived_G = 9.81*SD_Factor_G,
Actual_VTan = (LastObserved_vy^2+vx^2)^0.5, #pythagoras
Perceived_VTan = abs(Actual_VTan)*SD_Factor_VTan, #tangens ratio
ActualAngle = atan(vx/LastObserved_vy), #get actual angle
Perceived_Angle = (abs(ActualAngle)+SD_Factor_Angle),
Perceived_VY = abs(cos(Perceived_Angle))*Perceived_VTan, #vertical velocity is not sensed directly, it needs to be recovered from noisy info about tangential velocity and angle-to-vertical!
Perceived_Distance = abs(HeightAtDisappearance)*SD_Factor_Distance)
response = response %>%
mutate(TemporalEstimateWithUncertainty = (-Perceived_VY +
(Perceived_VY^2 +
2*Perceived_G*Perceived_Distance)^0.5)/
Perceived_G,
TemporalEstimateWithUncertainty_AndResponseSD = TemporalEstimateWithUncertainty + Remaining_Response_Variability,
TemporalError_Sim = (TemporalEstimateWithUncertainty_AndResponseSD-OccludedTimeOfTrajectory))
#Here I get the SD of the participants timing - modelled responses and get actual responses
response = response %>%
group_by(id,g,vy,LongOcclusion,Condition) %>%
mutate(SD_Sim_Aux = sd(TemporalError_Sim,na.rm = TRUE),
SD_Real_Aux = sd(TemporalError,na.rm = TRUE))
response = response %>%
group_by(g,vy,LongOcclusion,Condition) %>%
mutate(SD_per_TTC_Modelled = mean(SD_Sim_Aux),
SD_per_TTC_Real = mean(SD_Real_Aux),
Error_Per_TTC = (SD_per_TTC_Real-SD_per_TTC_Modelled)^2)
response3 = response %>%
select(id,block,trial,vy,LongOcclusion, g,Condition,SD_per_TTC_Modelled,SD_per_TTC_Real,Perceived_Distance,SD_Real_Aux)
response2 = rbind(response2,response3)
print(i)
}
response2 = response2 %>%
group_by(id,block,trial,g,vy,LongOcclusion,Condition) %>%
mutate(Modelled_SD = mean(SD_per_TTC_Modelled),
Real_SD = mean(SD_per_TTC_Real)) %>%
slice(1) %>%
mutate(vy_factor = case_when(
vy == 6 ~ "6 m/s",
vy == 4.5 ~ "4.5 m/s",
),
Occlusion_factor = case_when(
LongOcclusion == 1 ~ "Long Occlusion",
LongOcclusion == 0 ~ "Short Occlusion",
)
)
response3 = rbind(response2,response2)
response3$SD = c(response2$Modelled_SD,response2$Real_SD)
response3$TypeOfSD = c(rep("Simulated",length(response2$g)),rep("Observed",length(response2$g)))
#######Plot the SDs
Method2 = ggplot(response3[response3$Condition == "Different g",],aes(x = g, y = SD, color = TypeOfSD)) +
geom_point(size = 5) +
ylab("SD (s)") +
xlab("Gravity") +
theme(legend.position = "top") +
scale_color_manual(name = "",
values = c(BlauUB,LightRed)) +
facet_grid(vy_factor~Occlusion_factor) +
scale_x_discrete(name = "Gravity (g)",
labels=c("0.7g", "0.85g", "1g", "1.15g", "1.3g"))
Method2
SD_Gravity
SD_RemainingVariability
response3
response3$SD
response3$TypeOfSD
plot_grid(Method1,Method2)
plot_grid(Method1,Method2, labels = c("A. Method 1", "B. Method 2" ))
response$block
response$Condition
response$Condition
ggsave("SimulatedSDs_Fits_Both_Methods.jpg", w=6, h=6)
ggsave("SimulatedSDs_Fits_Both_Methods.jpg", w=12, h=6)
