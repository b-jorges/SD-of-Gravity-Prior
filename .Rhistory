2*Perceived_G*Perceived_Distance)^0.5)/
Perceived_G,
TemporalEstimateWithUncertainty_AndResponseSD = TemporalEstimateWithUncertainty + Remaining_Response_Variability,
TemporalError_Sim = (TemporalEstimateWithUncertainty_AndResponseSD-OccludedTimeOfTrajectory))
#Here I get the SD of the participants timing - modelled responses and get actual responses
response = response %>%
group_by(id,g,vy,LongOcclusion,Condition) %>%
mutate(SD_Sim_Aux = sd(TemporalError_Sim,na.rm = TRUE),
SD_Real_Aux = sd(TemporalError,na.rm = TRUE))
response = response %>%
group_by(g,vy,LongOcclusion,Condition) %>%
mutate(SD_per_TTC_Modelled = median(SD_Sim_Aux),
SD_per_TTC_Real = median(SD_Real_Aux),
Error_Per_TTC = (SD_per_TTC_Real-SD_per_TTC_Modelled)^2)
response5 = response %>%
select(id,block,trial,vy,LongOcclusion, g,Condition,SD_per_TTC_Modelled,SD_per_TTC_Real,Perceived_Distance,SD_Real_Aux)
response2 = rbind(response2,response5)
print(i)
}
response2 = response2 %>%
group_by(id,block,trial,g,vy,LongOcclusion,Condition) %>%
mutate(Modelled_SD = median(SD_per_TTC_Modelled),
Real_SD = median(SD_per_TTC_Real)) %>%
slice(1) %>%
mutate(vy_factor = case_when(
vy == 6 ~ "6 m/s",
vy == 4.5 ~ "4.5 m/s",
),
Occlusion_factor = case_when(
LongOcclusion == 1 ~ "Long Occlusion",
LongOcclusion == 0 ~ "Short Occlusion",
)
)
#######Plot the SDs
ggplot(response4[response4$Condition == "Different g",],aes(x = g, y = SD, color = TypeOfSD)) +
geom_point(size = 1) +
ylab("SD (s)") +
xlab("Gravity") +
theme(legend.position = "top") +
scale_color_manual(name = "",
values = c(BlauUB,LightRed, LightTurquoise)) +
facet_grid(vy_factor~Occlusion_factor) +
scale_x_discrete(name = "Gravity (g)",
labels=c("0.7g", "0.85g", "1g", "1.15g", "1.3g"))
resÃ¶onse4
response4$SD[response4$TypeOfSD == "Simulated (Method 2)"]
response4$SD[response4$TypeOfSD == "Simulated (Method 2)"] - response4$SD[response4$TypeOfSD == "Simulated (Method 1)"]
View(response3)
###########################
#######Make plot of SD fit between Observed and Simulated //
###########################
response3 = c()
response2 = c()
SD_Velocity = 0.148
SD_Distance = 0.148
SD_Angle = 0.089
AF_Factor = 0.8
SD_Gravity = Optimization2$minimum
SD_RemainingVariability = Optimization$minimum
for (i in 1:100){
response = response %>%
mutate(SD_Factor_G = abs(rnorm(length(g),1,SD_Gravity)),
SD_Factor_VTan = abs(rnorm(length(g),1,SD_Velocity))*AF_Factor, #account for Aubert-Fleischl
SD_Factor_Distance = abs(rnorm(length(g),1,SD_Distance)),
SD_Factor_Angle = abs(rnorm(length(g),1,SD_Angle)),
Remaining_Response_Variability = rnorm(length(g),0,SD_RemainingVariability),
Perceived_G = 9.81*SD_Factor_G,
Actual_VTan = (LastObserved_vy^2+vx^2)^0.5, #pythagoras
Perceived_VTan = abs(Actual_VTan)*SD_Factor_VTan, #tangens ratio
ActualAngle = atan(vx/LastObserved_vy), #get actual angle
Perceived_Angle = (abs(ActualAngle)+SD_Factor_Angle),
Perceived_VY = abs(cos(Perceived_Angle))*Perceived_VTan, #vertical velocity is not sensed directly, it needs to be recovered from noisy info about tangential velocity and angle-to-vertical!
Perceived_Distance = abs(HeightAtDisappearance)*SD_Factor_Distance)
response = response %>%
mutate(TemporalEstimateWithUncertainty = (-Perceived_VY +
(Perceived_VY^2 +
2*Perceived_G*Perceived_Distance)^0.5)/
Perceived_G,
TemporalEstimateWithUncertainty_AndResponseSD = TemporalEstimateWithUncertainty + Remaining_Response_Variability,
TemporalError_Sim = (TemporalEstimateWithUncertainty_AndResponseSD-OccludedTimeOfTrajectory))
#Here I get the SD of the participants timing - modelled responses and get actual responses
response = response %>%
group_by(id,g,vy,LongOcclusion,Condition) %>%
mutate(SD_Sim_Aux = sd(TemporalError_Sim,na.rm = TRUE),
SD_Real_Aux = sd(TemporalError,na.rm = TRUE))
response = response %>%
group_by(g,vy,LongOcclusion,Condition) %>%
mutate(SD_per_TTC_Modelled = median(SD_Sim_Aux),
SD_per_TTC_Real = median(SD_Real_Aux),
Error_Per_TTC = ((SD_per_TTC_Real-SD_per_TTC_Modelled)^2)^0.5)
response2 = rbind(response2,response %>%
select(id,block,trial,vy,LongOcclusion, g,Condition,SD_per_TTC_Modelled,SD_per_TTC_Real,Perceived_Distance,SD_Real_Aux))
print(i)
}
response2 = response2 %>%
group_by(id,block,trial,g,vy,LongOcclusion,Condition) %>%
mutate(Modelled_SD = median(SD_per_TTC_Modelled),
Real_SD = median(SD_per_TTC_Real)) %>%
slice(1) %>%
mutate(vy_factor = case_when(
vy == 6 ~ "6 m/s",
vy == 4.5 ~ "4.5 m/s",
),
Occlusion_factor = case_when(
LongOcclusion == 1 ~ "Long Occlusion",
LongOcclusion == 0 ~ "Short Occlusion",
)
)
response3 = rbind(response2,response2)
response3$SD = c(response2$Modelled_SD,response2$Real_SD)
response3$TypeOfSD = c(rep("Simulated (Method 1)",length(response2$g)),rep("Observed",length(response2$g)))
#######Plot the SDs
Method1 = ggplot(response3[response3$Condition == "Different g",],aes(x = as.factor(g), y = SD, color = TypeOfSD)) +
geom_point(size = 5) +
ylab("SD (s)") +
xlab("Gravity") +
theme(legend.position = "top") +
scale_color_manual(name = "",
values = c(BlauUB,LightRed)) +
facet_grid(vy_factor~Occlusion_factor) +
scale_x_discrete(name = "Gravity (g)",
labels=c("0.7g", "0.85g", "1g", "1.15g", "1.3g"))
Method1
###########################
#######Make plot of SD fit between Observed and Simulated //
###########################
response5 = c()
response2 = c()
SD_Velocity = 0.148
SD_Distance = 0.148
SD_Angle = 0.089
AF_Factor = 0.8
SD_Gravity = OptimTest$par[1]
SD_RemainingVariability = OptimTest$par[2]
for (i in 1:100){
response = response %>%
mutate(SD_Factor_G = abs(rnorm(length(g),1,SD_Gravity)),
SD_Factor_VTan = abs(rnorm(length(g),1,SD_Velocity))*AF_Factor, #account for Aubert-Fleischl
SD_Factor_Distance = abs(rnorm(length(g),1,SD_Distance)),
SD_Factor_Angle = abs(rnorm(length(g),1,SD_Angle)),
Remaining_Response_Variability = rnorm(length(g),0,SD_RemainingVariability),
Perceived_G = 9.81*SD_Factor_G,
Actual_VTan = (LastObserved_vy^2+vx^2)^0.5, #pythagoras
Perceived_VTan = abs(Actual_VTan)*SD_Factor_VTan, #tangens ratio
ActualAngle = atan(vx/LastObserved_vy), #get actual angle
Perceived_Angle = (abs(ActualAngle)+SD_Factor_Angle),
Perceived_VY = abs(cos(Perceived_Angle))*Perceived_VTan, #vertical velocity is not sensed directly, it needs to be recovered from noisy info about tangential velocity and angle-to-vertical!
Perceived_Distance = abs(HeightAtDisappearance)*SD_Factor_Distance)
response = response %>%
mutate(TemporalEstimateWithUncertainty = (-Perceived_VY +
(Perceived_VY^2 +
2*Perceived_G*Perceived_Distance)^0.5)/
Perceived_G,
TemporalEstimateWithUncertainty_AndResponseSD = TemporalEstimateWithUncertainty + Remaining_Response_Variability,
TemporalError_Sim = (TemporalEstimateWithUncertainty_AndResponseSD-OccludedTimeOfTrajectory))
#Here I get the SD of the participants timing - modelled responses and get actual responses
response = response %>%
group_by(id,g,vy,LongOcclusion,Condition) %>%
mutate(SD_Sim_Aux = sd(TemporalError_Sim,na.rm = TRUE),
SD_Real_Aux = sd(TemporalError,na.rm = TRUE))
response = response %>%
group_by(g,vy,LongOcclusion,Condition) %>%
mutate(SD_per_TTC_Modelled = median(SD_Sim_Aux),
SD_per_TTC_Real = median(SD_Real_Aux),
Error_Per_TTC = (SD_per_TTC_Real-SD_per_TTC_Modelled)^2)
response2 = rbind(response2,response %>%
select(id,block,trial,vy,LongOcclusion, g,Condition,SD_per_TTC_Modelled,SD_per_TTC_Real,Perceived_Distance,SD_Real_Aux))
print(i)
}
response2 = response2 %>%
group_by(id,block,trial,g,vy,LongOcclusion,Condition) %>%
mutate(Modelled_SD = median(SD_per_TTC_Modelled),
Real_SD = median(SD_per_TTC_Real)) %>%
slice(1) %>%
mutate(vy_factor = case_when(
vy == 6 ~ "6 m/s",
vy == 4.5 ~ "4.5 m/s",
),
Occlusion_factor = case_when(
LongOcclusion == 1 ~ "Long Occlusion",
LongOcclusion == 0 ~ "Short Occlusion",
)
)
response2$SD = response2$Modelled_SD
response2$TypeOfSD = "Simulated (Method 2)"
response2$SD
response4 = rbind(response3,response2)
response4$SD[response4$TypeOfSD == "Simulated (Method 2)"] - response4$SD[response4$TypeOfSD == "Simulated (Method 1)"]
#######Plot the SDs
ggplot(response4[response4$Condition == "Different g",],aes(x = g, y = SD, color = TypeOfSD)) +
geom_point(size = 1) +
ylab("SD (s)") +
xlab("Gravity") +
theme(legend.position = "top") +
scale_color_manual(name = "",
values = c(BlauUB,LightRed, LightTurquoise)) +
facet_grid(vy_factor~Occlusion_factor) +
scale_x_discrete(name = "Gravity (g)",
labels=c("0.7g", "0.85g", "1g", "1.15g", "1.3g"))
#######Plot the SDs
ggplot(response4[response4$Condition == "Different g",],aes(x = g, y = SD, color = TypeOfSD)) +
geom_point(size = 5) +
ylab("SD (s)") +
xlab("Gravity") +
theme(legend.position = "top") +
scale_color_manual(name = "",
values = c(BlauUB,LightRed, LightTurquoise)) +
facet_grid(vy_factor~Occlusion_factor) +
scale_x_discrete(name = "Gravity (g)",
labels=c("0.7g", "0.85g", "1g", "1.15g", "1.3g"))
#######Plot the SDs
ggplot(response4[response4$Condition == "Different g",],aes(x = g, y = SD, color = TypeOfSD)) +
geom_point(size = 5) +
ylab("SD (s)") +
xlab("Gravity") +
theme(legend.position = "top") +
scale_color_manual(name = "",
values = c(BlauUB,LightRed, Red)) +
facet_grid(vy_factor~Occlusion_factor) +
scale_x_discrete(name = "Gravity (g)",
labels=c("0.7g", "0.85g", "1g", "1.15g", "1.3g"))
ggsave("SimulatedSDs_Fits_Both_Methods.jpg", w=12, h=6)
#######Plot the SDs
ggplot(response4[response4$Condition == "Different g",],aes(x = as.factor(g), y = SD, color = TypeOfSD)) +
geom_point(size = 5) +
ylab("SD (s)") +
xlab("Gravity") +
theme(legend.position = "top") +
scale_color_manual(name = "",
values = c(BlauUB,LightRed, Red)) +
facet_grid(vy_factor~Occlusion_factor) +
scale_x_discrete(name = "Gravity (g)",
labels=c("0.7g", "0.85g", "1g", "1.15g", "1.3g"))
Tentative_SD_Gravity = seq(0.15,0.25,0.01) ####Again, takes a while
error_Gravity = c()
for (i in 1:length(Tentative_SD_Gravity)){
f = GetSDMatchForG(Tentative_SD_Gravity[i],1000,SD_RemainingVariability=SD_RemainingVariability)
error_Gravity = c(error_Gravity,f)
}
RangeOfValesSDGravity = data.frame(SD=Tentative_SD_Gravity,Error=error_Gravity)
ggplot(RangeOfValesSDGravity, aes(SD,Error)) +
geom_point(size=5) +
xlab("SD (m/sÂ²)") +
ylab("Error (s)")
ggsave("Range of Gravity SDs.jpg", w=4, h=4)
Tentative_SD_Remaining = seq(0,0.08,0.01) ###this takes a while!
error_Remaining = c()
for (i in 1:length(Tentative_SD_Remaining)){
f = GetSDMatchForRemainingNoise(Tentative_SD_Remaining[i],1000)
error_Remaining = c(error_Remaining,f)
}
RangeOfValesSDRemainingError = data.frame(SD=Tentative_SD_Remaining,Error=error_Remaining)
ggplot(RangeOfValesSDRemainingError, aes(SD,Error)) +
geom_point(size = 5) +
xlab("SD (s)") +
ylab("Error (s)")
ggsave("Range of Remaining Error SDs.jpg", w=4, h=4)
SD_RemainingVariability
Optimization$minimum
#####Check a range of gravity SD values
Tentative_SD_Gravity = seq(0.15,0.25,0.01) ####Again, takes a while
error_Gravity = c()
for (i in 1:length(Tentative_SD_Gravity)){
f = GetSDMatchForG(Tentative_SD_Gravity[i],1000,SD_RemainingVariability=Optimization$minimum)
error_Gravity = c(error_Gravity,f)
}
RangeOfValesSDGravity = data.frame(SD=Tentative_SD_Gravity,Error=error_Gravity)
ggplot(RangeOfValesSDGravity, aes(SD,Error)) +
geom_point(size=5) +
xlab("SD (m/sÂ²)") +
ylab("Error (s)")
ggsave("Range of Gravity SDs.jpg", w=4, h=4)
Tentative_SD_Gravity = seq(0,0.28,0.03) ####Again, takes a while
error_Gravity = c()
for (i in 1:length(Tentative_SD_Gravity)){
f = GetSDMatchForG(Tentative_SD_Gravity[i],1000,SD_RemainingVariability=Optimization$minimum)
error_Gravity = c(error_Gravity,f)
}
RangeOfValesSDGravity = data.frame(SD=Tentative_SD_Gravity,Error=error_Gravity)
ggplot(RangeOfValesSDGravity, aes(SD,Error)) +
geom_point(size=5) +
xlab("SD (m/sÂ²)") +
ylab("Error (s)")
ggsave("Range of Gravity SDs.jpg", w=4, h=4)
#######Plot the SDs
ggplot(response4[response4$Condition == "Different g",],aes(x = as.factor(g), y = SD, color = TypeOfSD)) +
geom_point(size = 5) +
ylab("SD (s)") +
xlab("Gravity") +
theme(legend.position = "top") +
scale_color_manual(name = "",
values = c(BlauUB,LightRed, Red)) +
facet_grid(vy_factor~Occlusion_factor) +
scale_x_discrete(name = "Gravity (g)",
labels=c("0.7g", "0.85g", "1g", "1.15g", "1.3g"))
ggsave("SimulatedSDs_Fits_Both_Methods.jpg", w=10, h=5)
SD_Gravity
Optimization2$minimum
Optimized_SD_Gravity*9.81
#get the correspondance in terms of "Weber fractions"
pnorm(11.21,9.81,Optimized_SD_Gravity*9.81)
#get the correspondance in terms of "Weber fractions"
pnorm(11.25,9.81,Optimized_SD_Gravity*9.81)
#get the correspondance in terms of "Weber fractions"
pnorm(11.24,9.81,Optimized_SD_Gravity*9.81)
#get the correspondance in terms of "Weber fractions"
pnorm(11.245,9.81,Optimized_SD_Gravity*9.81)
11.245/9.81
Optimized_SD_Gravity
Optimization2
Optimization$minimum
Optimization
OptimTest
SD_Gravity*9.81 #non standardized standard deviation of the strong gravity prior
pnorm(10.87,9.81,SD_Gravity*9.81) #Weber Fraction is the difference between the mean and that point on a cummulative Gaussian where mean and standard deviation yield 0.25/0.75 ...
pnorm(10.95,9.81,SD_Gravity*9.81) #Weber Fraction is the difference between the mean and that point on a cummulative Gaussian where mean and standard deviation yield 0.25/0.75 ...
pnorm(11,9.81,SD_Gravity*9.81) #Weber Fraction is the difference between the mean and that point on a cummulative Gaussian where mean and standard deviation yield 0.25/0.75 ...
pnorm(11.1,9.81,SD_Gravity*9.81) #Weber Fraction is the difference between the mean and that point on a cummulative Gaussian where mean and standard deviation yield 0.25/0.75 ...
pnorm(11.02,9.81,SD_Gravity*9.81) #Weber Fraction is the difference between the mean and that point on a cummulative Gaussian where mean and standard deviation yield 0.25/0.75 ...
pnorm(11.01,9.81,SD_Gravity*9.81) #Weber Fraction is the difference between the mean and that point on a cummulative Gaussian where mean and standard deviation yield 0.25/0.75 ...
11.01/9.81 #... in percent.
OptimTest
####compare squared mean errors for both models
Errors_Mean %>%
group_by(Condition,vy,LongOcclusion,TypeOfError) %>%
mutate(MeanSquaredError = round((mean((Error-ActualError)^2))^0.5,5)) %>%
select(Condition,vy,LongOcclusion,TypeOfError,MeanSquaredError) %>%
filter(TypeOfError != "Obs. Error") %>%
slice(1) #####Mean Squared Error between AF-Observed and No AF-Observed for all conditions separate
Errors_Mean %>%
group_by(TypeOfError) %>%
mutate(MeanSquaredError = round(mean((Error-ActualError)^2),5)) %>%
select(Condition,vy,LongOcclusion,TypeOfError,MeanSquaredError) %>%
filter(TypeOfError != "Obs. Error") %>%
slice(1) #####Mean Squared Error between AF-Observed and No AF-Observed collapsed across conditions
####compare squared mean errors for both models
Errors_Mean %>%
group_by(Condition,vy,LongOcclusion,TypeOfError) %>%
mutate(RootMeanSquaredError = round((mean((Error-ActualError)^2))^0.5,5)) %>%
select(Condition,vy,LongOcclusion,TypeOfError,MeanSquaredError) %>%
filter(TypeOfError != "Obs. Error") %>%
slice(1) #####Mean Squared Error between AF-Observed and No AF-Observed for all conditions separate
####compare squared mean errors for both models
Errors_Mean %>%
group_by(Condition,vy,LongOcclusion,TypeOfError) %>%
mutate(RootMeanSquaredError = round((mean((Error-ActualError)^2))^0.5,5)) %>%
select(Condition,vy,LongOcclusion,TypeOfError,RootMeanSquaredError) %>%
filter(TypeOfError != "Obs. Error") %>%
slice(1) #####Mean Squared Error between AF-Observed and No AF-Observed for all conditions separate
Errors_Mean %>%
group_by(TypeOfError) %>%
mutate(RootMeanSquaredError = round(mean((Error-ActualError)^2),5)) %>%
select(Condition,vy,LongOcclusion,TypeOfError,RootMeanSquaredError) %>%
filter(TypeOfError != "Obs. Error") %>%
slice(1) #####Mean Squared Error between AF-Observed and No AF-Observed collapsed across conditions
Errors_Mean %>%
group_by(TypeOfError) %>%
mutate(RootMeanSquaredError = round((mean((Error-ActualError)^2))^0.5,5)) %>%
select(Condition,vy,LongOcclusion,TypeOfError,RootMeanSquaredError) %>%
filter(TypeOfError != "Obs. Error") %>%
slice(1) #####Mean Squared Error between AF-Observed and No AF-Observed collapsed across conditions
#######Plot the SDs (Figure 8)
ggplot(response4[response4$Condition == "Different g",],aes(x = as.factor(g), y = SD, color = TypeOfSD)) +
geom_point(size = 5) +
ylab("SD (s)") +
xlab("Gravity") +
theme(legend.position = "top") +
scale_color_manual(name = "",
values = c(BlauUB,LightRed, Red)) +
facet_grid(vy_factor~Occlusion_factor) +
scale_x_discrete(name = "Gravity (g)",
labels=c("0.7g", "0.85g", "1g", "1.15g", "1.3g"))
ggsave("SimulatedSDs_Fits_Both_Methods.jpg", w=4, h=4)
###########################
#######Make plot of SD fit between Observed and Simulated //
###########################
#######Stepwise optimization (METHOD 1)
response3 = c()
response2 = c()
SD_Velocity = 0.148
SD_Distance = 0.148
SD_Angle = 0.089
AF_Factor = 0.8
SD_Gravity = Optimization2$minimum
SD_RemainingVariability = Optimization$minimum
for (i in 1:100){
response = response %>%
mutate(SD_Factor_G = abs(rnorm(length(g),1,SD_Gravity)),
SD_Factor_VTan = abs(rnorm(length(g),1,SD_Velocity))*AF_Factor, #account for Aubert-Fleischl
SD_Factor_Distance = abs(rnorm(length(g),1,SD_Distance)),
SD_Factor_Angle = abs(rnorm(length(g),1,SD_Angle)),
Remaining_Response_Variability = rnorm(length(g),0,SD_RemainingVariability),
Perceived_G = 9.81*SD_Factor_G,
Actual_VTan = (LastObserved_vy^2+vx^2)^0.5, #pythagoras
Perceived_VTan = abs(Actual_VTan)*SD_Factor_VTan, #tangens ratio
ActualAngle = atan(vx/LastObserved_vy), #get actual angle
Perceived_Angle = (abs(ActualAngle)+SD_Factor_Angle),
Perceived_VY = abs(cos(Perceived_Angle))*Perceived_VTan, #vertical velocity is not sensed directly, it needs to be recovered from noisy info about tangential velocity and angle-to-vertical!
Perceived_Distance = abs(HeightAtDisappearance)*SD_Factor_Distance)
response = response %>%
mutate(TemporalEstimateWithUncertainty = (-Perceived_VY +
(Perceived_VY^2 +
2*Perceived_G*Perceived_Distance)^0.5)/
Perceived_G,
TemporalEstimateWithUncertainty_AndResponseSD = TemporalEstimateWithUncertainty + Remaining_Response_Variability,
TemporalError_Sim = (TemporalEstimateWithUncertainty_AndResponseSD-OccludedTimeOfTrajectory))
#Here I get the SD of the participants timing - modelled responses and get actual responses
response = response %>%
group_by(id,g,vy,LongOcclusion,Condition) %>%
mutate(SD_Sim_Aux = sd(TemporalError_Sim,na.rm = TRUE),
SD_Real_Aux = sd(TemporalError,na.rm = TRUE))
response = response %>%
group_by(g,vy,LongOcclusion,Condition) %>%
mutate(SD_per_TTC_Modelled = median(SD_Sim_Aux),
SD_per_TTC_Real = median(SD_Real_Aux),
Error_Per_TTC = ((SD_per_TTC_Real-SD_per_TTC_Modelled)^2)^0.5)
response2 = rbind(response2,response %>%
select(id,block,trial,vy,LongOcclusion, g,Condition,SD_per_TTC_Modelled,SD_per_TTC_Real,Perceived_Distance,SD_Real_Aux))
print(i)
}
response2 = response2 %>%
group_by(id,block,trial,g,vy,LongOcclusion,Condition) %>%
mutate(Modelled_SD = median(SD_per_TTC_Modelled),
Real_SD = median(SD_per_TTC_Real)) %>%
slice(1) %>%
mutate(vy_factor = case_when(
vy == 6 ~ "6 m/s",
vy == 4.5 ~ "4.5 m/s",
),
Occlusion_factor = case_when(
LongOcclusion == 1 ~ "Long Occlusion",
LongOcclusion == 0 ~ "Short Occlusion",
)
)
response3 = rbind(response2,response2)
response3$SD = c(response2$Modelled_SD,response2$Real_SD)
response3$TypeOfSD = c(rep("Sim. (Method 1)",length(response2$g)),rep("Observed",length(response2$g)))
###########################
#######Optimization over both motor variability and gravity variability (METHOD 2)
response5 = c()
response2 = c()
SD_Velocity = 0.148
SD_Distance = 0.148
SD_Angle = 0.089
AF_Factor = 0.8
SD_Gravity = OptimTest$par[1]
SD_RemainingVariability = OptimTest$par[2]
for (i in 1:100){
response = response %>%
mutate(SD_Factor_G = abs(rnorm(length(g),1,SD_Gravity)),
SD_Factor_VTan = abs(rnorm(length(g),1,SD_Velocity))*AF_Factor, #account for Aubert-Fleischl
SD_Factor_Distance = abs(rnorm(length(g),1,SD_Distance)),
SD_Factor_Angle = abs(rnorm(length(g),1,SD_Angle)),
Remaining_Response_Variability = rnorm(length(g),0,SD_RemainingVariability),
Perceived_G = 9.81*SD_Factor_G,
Actual_VTan = (LastObserved_vy^2+vx^2)^0.5, #pythagoras
Perceived_VTan = abs(Actual_VTan)*SD_Factor_VTan, #tangens ratio
ActualAngle = atan(vx/LastObserved_vy), #get actual angle
Perceived_Angle = (abs(ActualAngle)+SD_Factor_Angle),
Perceived_VY = abs(cos(Perceived_Angle))*Perceived_VTan, #vertical velocity is not sensed directly, it needs to be recovered from noisy info about tangential velocity and angle-to-vertical!
Perceived_Distance = abs(HeightAtDisappearance)*SD_Factor_Distance)
response = response %>%
mutate(TemporalEstimateWithUncertainty = (-Perceived_VY +
(Perceived_VY^2 +
2*Perceived_G*Perceived_Distance)^0.5)/
Perceived_G,
TemporalEstimateWithUncertainty_AndResponseSD = TemporalEstimateWithUncertainty + Remaining_Response_Variability,
TemporalError_Sim = (TemporalEstimateWithUncertainty_AndResponseSD-OccludedTimeOfTrajectory))
#Here I get the SD of the participants timing - modelled responses and get actual responses
response = response %>%
group_by(id,g,vy,LongOcclusion,Condition) %>%
mutate(SD_Sim_Aux = sd(TemporalError_Sim,na.rm = TRUE),
SD_Real_Aux = sd(TemporalError,na.rm = TRUE))
response = response %>%
group_by(g,vy,LongOcclusion,Condition) %>%
mutate(SD_per_TTC_Modelled = median(SD_Sim_Aux),
SD_per_TTC_Real = median(SD_Real_Aux),
Error_Per_TTC = (SD_per_TTC_Real-SD_per_TTC_Modelled)^2)
response2 = rbind(response2,response %>%
select(id,block,trial,vy,LongOcclusion, g,Condition,SD_per_TTC_Modelled,SD_per_TTC_Real,Perceived_Distance,SD_Real_Aux))
print(i)
}
response2 = response2 %>%
group_by(id,block,trial,g,vy,LongOcclusion,Condition) %>%
mutate(Modelled_SD = median(SD_per_TTC_Modelled),
Real_SD = median(SD_per_TTC_Real)) %>%
slice(1) %>%
mutate(vy_factor = case_when(
vy == 6 ~ "6 m/s",
vy == 4.5 ~ "4.5 m/s",
),
Occlusion_factor = case_when(
LongOcclusion == 1 ~ "Long Occlusion",
LongOcclusion == 0 ~ "Short Occlusion",
)
)
response2$SD = response2$Modelled_SD
response2$TypeOfSD = "Sim. (Method 2)"
response4 = rbind(response3,response2)
#######Plot the SDs (Figure 8)
ggplot(response4[response4$Condition == "Different g",],aes(x = as.factor(g), y = SD, color = TypeOfSD)) +
geom_point(size = 5) +
ylab("SD (s)") +
xlab("Gravity") +
theme(legend.position = "top") +
scale_color_manual(name = "",
values = c(BlauUB,LightRed, Red)) +
facet_grid(vy_factor~Occlusion_factor) +
scale_x_discrete(name = "Gravity (g)",
labels=c("0.7g", "0.85g", "1g", "1.15g", "1.3g"))
ggsave("SimulatedSDs_Fits_Both_Methods.jpg", w=4, h=4)
ggsave("SimulatedSDs_Fits_Both_Methods.jpg", w=6, h=6)
